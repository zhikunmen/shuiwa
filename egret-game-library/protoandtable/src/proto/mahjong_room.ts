//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// Generated from: mahjong_room.proto
/// <reference path="common.ts" />
/// <reference path="lobby.ts" />

module Cmd {
	/**
	 * 麻将类型
	 */
	export enum MahjongType {
		MahjongType_None = 0,
		/**
		 * 双人麻将
		 */
		MahjongType_Two = 1,
		/**
		 * 四人麻将
		 */
		MahjongType_Four = 2
	}
	export enum MahjongCardType {
		MahjongCardType_None = 0,
		/**
		 * 万
		 */
		MahjongCardType_Million = 1,
		/**
		 * 条
		 */
		MahjongCardType_strip = 2,
		/**
		 * 筒
		 */
		MahjongCardType_pie = 3,
		/**
		 * 东南西北中发白
		 */
		MahjongCardType_Other = 4,
		/**
		 * 花
		 */
		MahjongCardType_flower = 5
	}
	export enum MahjongCardOtherType {
		MahjongCardOtherType_None = 0,
		/**
		 * 东
		 */
		MahjongCardOtherType_East = 1,
		/**
		 * 南
		 */
		MahjongCardOtherType_South = 2,
		/**
		 * 西
		 */
		MahjongCardOtherType_West = 3,
		/**
		 * 北
		 */
		MahjongCardOtherType_North = 4,
		/**
		 * 中
		 */
		MahjongCardOtherType_Mid = 5,
		/**
		 * 发
		 */
		MahjongCardOtherType_Rich = 6,
		/**
		 * 白
		 */
		MahjongCardOtherType_White = 7
	}
	export enum MahjongOpCardType {
		MahjongOpCardType_None = 0,
		/**
		 * 胡牌
		 */
		MahjongOpCardType_Win = 1,
		/**
		 * 杠牌
		 */
		MahjongOpCardType_Bar = 2,
		/**
		 * 补牌 --3,4,5为预留字段
		 */
		MahjongOpCardType_Supply = 3,
		/**
		 * 碰牌
		 */
		MahjongOpCardType_Touch = 6,
		/**
		 * 吃顺
		 */
		MahjongOpCardType_Eat = 7,
		/**
		 * MahjongOpCardType_Send				= 8;	// 摸牌
		 *  不操作
		 */
		MahjongOpCardType_Undo = 9,
		/**
		 * 听牌
		 */
		MahjongOpCardType_Listen = 10,
		/**
		 * 三金倒(大连打宝消息)
		 */
		MahjongOpCardType_ThreeGold = 11,
		/**
		 * 天胡
		 */
		MahjongOpCardType_SkyWin = 12,
		/**
		 * 抢金
		 */
		MahjongOpCardType_GrabGold = 13,
		/**
		 * 游金
		 */
		MahjongOpCardType_GoldSwim = 14,
		/**
		 * 双游
		 */
		MahjongOpCardType_DoubleSwim = 15,
		/**
		 * 三游
		 */
		MahjongOpCardType_ThreeSwim = 16,
		/**
		 * 八花
		 */
		MahjongOpCardType_EightFlower = 17,
		/**
		 * 抢杠和
		 */
		MahjongOpCardType_BarOtherWin = 18,
		/**
		 * 四金倒
		 */
		MahjongOpCardType_FourGold = 19,
		/**
		 * 五金倒
		 */
		MahjongOpCardType_FiveGold = 20,
		/**
		 * 六金倒
		 */
		MahjongOpCardType_SixGold = 21,
		/**
		 * 长沙麻将
		 *  起手小胡
		 */
		MahjongOpCardType_startSmallWin = 22,
		/**
		 *  遵义麻将
		 *  原缺
		 */
		MahjongOpCardType_OriginalLack = 23,
		/**
		 * 定缺
		 */
		MahjongOpCardType_EnsureLack = 24,
		/**
		 *  金华麻将
		 *  敲响
		 */
		MahjongOpCardType_Knock = 25,
		/**
		 *  二人金币
		 *  加倍
		 */
		MahjongOpCardType_Double = 26,
		/**
		 *  漳州麻将
		 *  四游
		 */
		MahjongOpCardType_FourSwim = 27,
		/**
		 * 五游
		 */
		MahjongOpCardType_FiveSwim = 28,
		/**
		 * 六游
		 */
		MahjongOpCardType_SixSwim = 29,
		/**
		 * 抢杠
		 */
		MahjongOpCardType_BarOther = 101,
		/**
		 * 自杠
		 */
		MahjongOpCardType_BarSelf = 102,
		/**
		 * 碰杠
		 */
		MahjongOpCardType_BarTouch = 103,
		/**
		 *  古田麻将
		 *  原金杠
		 */
		MahjongOpCardType_YuanJinBar = 104,
		/**
		 * 杂金杠
		 */
		MahjongOpCardType_ZaJinBar = 105,
		/**
		 * 长沙麻将
		 * 抢补
		 */
		MahjongOpCardType_SupplyOther = 202,
		/**
		 * 自补
		 */
		MahjongOpCardType_SupplySelf = 203,
		/**
		 * 碰补
		 */
		MahjongOpCardType_SupplyTouch = 204,
		/**
		 * 杠胡
		 */
		MahjongOpCardType_BarWin = 205,
		/**
		 * 宁德麻将
		 *  金坎
		 */
		MahjongOpCardType_JinKan = 110,
		/**
		 *  开化麻将
		 *  去不去
		 */
		MahjongOpCardType_QuBuQu = 111,
		/**
		 * 敲响
		 */
		MahjongOpCardType_QiaoXiang = 112,
		/**
		 * 四川麻将
		 *  换牌操作
		 */
		MahjongOpCardType_changgeCard = 120,
		/**
		 * 海南麻将吃三道吃四道动画
		 *  吃三道
		 */
		MahjongOpCardType_EatThree = 130,
		/**
		 * 吃四道
		 */
		MahjongOpCardType_EatFour = 131,
		/**
		 * 首张被跟
		 */
		MahjongOpCardType_FollowBanker = 132,
		/**
		 * 首张被杠
		 */
		MahjongOpCardType_BarFirst = 133,
		/**
		 * 宽甸麻将
		 * 报夹
		 */
		MahjongOpCardType_baojia = 33,
		/**
		 * 报吊
		 */
		MahjongOpCardType_baotdiao = 34,
		/**
		 * 站立报听
		 */
		MahjongOpCardType_zhanlibaoting = 35,
		/**
		 * 站立报夹
		 */
		MahjongOpCardType_zhanlibaojia = 36,
		/**
		 * 站立报吊
		 */
		MahjongOpCardType_zhanlibaodiao = 37,
		/**
		 * 抻吊
		 */
		MahjongOpCardType_chendiao = 38,
		/**
		 * 站立抻吊
		 */
		MahjongOpCardType_zhanlichendiao = 39,
		/**
		 * 报边夹
		 */
		MahjongOpCardType_baobianjia = 40,
		/**
		 * 站立报边夹
		 */
		MahjongOpCardType_zhanlibaobianjia = 41,
		/**
		 * 凤城麻将
		 * 摇宝
		 */
		MahjongOpCardType_yaobao = 50,
		/**
		 * 跟宝
		 */
		MahjongOpCardType_genbao = 51,
		/**
		 * 放风
		 */
		MahjongOpCardType_windCard = 52,
		/**
		 * 沈阳麻将
		 * 东南西旋风杠
		 */
		MahjongOpCardType_DNXBXuanFengBar = 106,
		/**
		 * 中发白旋风杠
		 */
		MahjongOpCardType_ZFBXuanFengBar = 107,
		/**
		 * 过蛋
		 */
		MahjongOpCardType_PassEggs = 108,
		/**
		 * 任丘麻将
		 * 中发白箭
		 */
		MahjongOpCardType_Jian = 55,
		/**
		 * 风
		 */
		MahjongOpCardType_Feng = 56,
		/**
		 * 正常偎牌
		 */
		MahjongOpCardType_NestleNormal = 57,
		/**
		 * 臭偎
		 */
		MahjongOpCardType_NestleSmell = 58,
		/**
		 * 自提 （盖三亮一）
		 */
		MahjongOpCardType_LiftSelf = 59,
		/**
		 * 坎提 （全暗）
		 */
		MahjongOpCardType_LiftPit = 60,
		/**
		 * 偎提 （盖三亮一）
		 */
		MahjongOpCardType_LiftNestle = 61,
		/**
		 * 偎跑 （全亮）
		 */
		MahjongOpCardType_RunNestle = 62,
		/**
		 * 碰跑 （全亮）
		 */
		MahjongOpCardType_RunTouch = 63,
		/**
		 * 坎跑 （全亮）
		 */
		MahjongOpCardType_RunPit = 64,
		/**
		 *  螺丝胡
		 *  胡(走),1表示胡继续
		 */
		MahjongOpCardType_WinGo = 65,
		/**
		 * 红拐弯比牌
		 */
		MahjongOpCardType_Compare = 66,
		/**
		 * 红拐弯等胡
		 */
		MahjongOpCardType_WaitWin = 67,
		/**
		 * 红拐弯枪胡
		 */
		MahjongOpCardType_GradWin = 68,
		/**
		 * 红拐弯枪胡(主动)
		 */
		MahjongOpCardType_GradWinSrlf = 69,
		/**
		 *  乐山麻将
		 * 软杠挑牌
		 */
		MahjongOpCardType_tiaopai = 70,
		/**
		 *  清远100张
		 * 养马牌
		 */
		MahjongOpCardType_yangmapai = 71
	}
	/**
	 * 番型
	 */
	export enum MahjongMultiType {
		/**
		 * 跟牌
		 */
		MahjongMultiType_FollowCard = 1,
		/**
		 * 花杠
		 */
		MahjongMultiType_FlowerBar = 2,
		/**
		 * 明杠
		 */
		MahjongMultiType_BrightBar = 3,
		/**
		 * 暗杠
		 */
		MahjongMultiType_DarkBar = 4,
		/**
		 * 自摸
		 */
		MahjongMultiType_WinSelf = 5,
		/**
		 * 抢杠胡
		 */
		MahjongMultiType_GrabBarWin = 6,
		/**
		 * 抢金
		 */
		MahjongMultiType_GrabGold = 7,
		/**
		 * 天胡
		 */
		MahjongMultiType_SkyWin = 8,
		/**
		 * 游金
		 */
		MahjongMultiType_GoldSwim = 9,
		/**
		 * 双游
		 */
		MahjongMultiType_DoubleSwim = 10,
		/**
		 * 三游
		 */
		MahjongMultiType_ThreeSwim = 11,
		/**
		 * 三金倒
		 */
		MahjongMultiType_ThreeGold = 12,
		/**
		 * 四金倒
		 */
		MahjongMultiType_FourGold = 13,
		/**
		 * 五金倒
		 */
		MahjongMultiType_FiveGold = 14,
		/**
		 * 六金倒
		 */
		MahjongMultiType_SixGold = 15,
		/**
		 * 十三幺
		 */
		MahjongMultiType_Thirteen = 16,
		/**
		 * 八花
		 */
		MahjongMultiType_Flowers = 17
	}
	/**
	 * 宁德麻将番型
	 */
	export enum NingDeMultiType {
		/**
		 * 鸡胡
		 */
		NingDeMultiType_ComminWin = 1,
		/**
		 * 自摸
		 */
		NingDeMultiType_SelfWin = 2,
		/**
		 * 抢金
		 */
		NingDeMultiType_GrabGold = 3,
		/**
		 * 天胡
		 */
		NingDeMultiType_SkyWin = 4,
		/**
		 * 三金倒
		 */
		NingDeMultiType_ThreeGold = 5,
		/**
		 * 金雀
		 */
		NingDeMultiType_GoldBird = 6,
		/**
		 * 金龙
		 */
		NingDeMultiType_GoldDragon = 7,
		/**
		 * 单调
		 */
		NingDeMultiType_SingleWin = 8,
		/**
		 * 清一色
		 */
		NingDeMultiType_SingleColor = 9,
		/**
		 * 补红中
		 */
		NingDeMultiType_BuHongZhong = 10,
		/**
		 * 基础分
		 */
		NingDeMultiType_Base = 11,
		/**
		 * 明杠
		 */
		NingDeMultiType_MingGang = 12,
		/**
		 * 暗杠
		 */
		NingDeMultiType_AnGang = 13,
		/**
		 * 金牌
		 */
		NingDeMultiType_GoldCard = 14
	}
	/**
	 * 捉鸡麻将番型
	 */
	export enum ZhuoJiMultiType {
		/**
		 * 平胡
		 */
		ZhuoJiMultiType_CommonWin = 1,
		/**
		 * 杠上开花
		 */
		ZhuoJiMultiType_BarWin = 2,
		/**
		 * 大对子
		 */
		ZhuoJiMultiType_BigCoupleWin = 3,
		/**
		 * 清一色
		 */
		ZhuoJiMultiType_UniformColorWin = 4,
		/**
		 * 七对
		 */
		ZhuoJiMultiType_SevenCoupleWin = 5,
		/**
		 * 龙七对
		 */
		ZhuoJiMultiType_DragonSevenCoupleWin = 6,
		/**
		 * 清七对
		 */
		ZhuoJiMultiType_UniformColorSevenCoupleWin = 7,
		/**
		 * 清大对
		 */
		ZhuoJiMultiType_UniformColorBigCoupleWin = 8,
		/**
		 * 清龙背
		 */
		ZhuoJiMultiType_UniformColorDungeonWin = 9,
		/**
		 * 单吊
		 */
		ZhuoJiMultiType_OneHandCardWin = 10,
		/**
		 * 清单吊
		 */
		ZhuoJiMultiType_UniformColorOneHandCardWin = 11,
		/**
		 * 自摸
		 */
		ZhuoJiMultiType_BySelfWin = 12,
		/**
		 * 热杠
		 */
		ZhuoJiMultiType_HotCannonWin = 13,
		/**
		 * 抢杠胡
		 */
		ZhuoJiMultiType_GrabBarWin = 14,
		/**
		 * 硬报
		 */
		ZhuoJiMultiType_HardCallWin = 15,
		/**
		 * 软报
		 */
		ZhuoJiMultiType_SoftCallWin = 16,
		/**
		 * 杀报
		 */
		ZhuoJiMultiType_KillCallWin = 17,
		/**
		 * 冲锋鸡
		 */
		ZhuoJiMultiType_RushChicken = 18,
		/**
		 * 责任鸡
		 */
		ZhuoJiMultiType_ResponseChicken = 19
	}
	/**
	 * 玩法
	 */
	export enum MahjongPlayType {
		/**
		 * 半自摸
		 */
		MahjongPlayType_Half = 11,
		/**
		 * 全自摸
		 */
		MahjongPlayType_Full = 12
	}
	export enum MahjongWinCardType {
		MahjongWinCardType_None = 0,
		/**
		 * 自摸
		 */
		MahjongWinCardType_Self = 1,
		/**
		 * 胡牌
		 */
		MahjongWinCardType_Shoot = 2,
		/**
		 * 放炮
		 */
		MahjongWinCardType_WinOther = 3
	}
	export enum MultiType {
		/**
		 * 明杠
		 */
		MahjongMulti_BrightBar = 1,
		/**
		 * 暗杠
		 */
		MahjongMulti_DarkBar = 2,
		/**
		 * 自摸
		 */
		MahjongMulti_selfWin = 3,
		/**
		 * 抢杠和
		 */
		MahjongMulti_grabBarWin = 4,
		/**
		 * 杠上开花
		 */
		MahjongMulti_flowerBarWin = 5,
		/**
		 * 无鬼
		 */
		MahjongMulti_NoGoldCard = 6,
		/**
		 * 中马
		 */
		MahjongMulti_Horse = 7,
		/**
		 * 七对
		 */
		MahjongMulti_SevenPairs = 8
	}
	export enum RoomPro {
		/**
		 * 离线
		 */
		RoomPro_0 = 0,
		/**
		 * 房间局数
		 */
		RoomPro_1 = 1,
		/**
		 * 游戏玩法
		 */
		RoomPro_2 = 2,
		/**
		 * 人数模式
		 */
		RoomPro_3 = 3,
		/**
		 * 支付模式
		 */
		RoomPro_4 = 4,
		/**
		 * 游金倍数
		 */
		RoomPro_5 = 5,
		/**
		 * 支持托管
		 */
		RoomPro_6 = 6
	}
	/**
	 * 两个骰子随机数
	 */
	export class DiceObj {
		/**
		 * 第一个随机数
		 */
		one: number;
		/**
		 * 第二个随机数
		 */
		two: number;
		GetType(): string { return 'Cmd.DiceObj'; }
	}
	/**
	 * 杠碰结构
	 */
	export class CardOpObj {
		/**
		 * MahjongOpCardType
		 */
		type: number;
		thisId: number;
		/**
		 * 被杠或被碰的玩家
		 */
		fromUid: number;
		GetType(): string { return 'Cmd.CardOpObj'; }
	}
	/**
	 * 摸牌结构
	 */
	export class CardSendObj {
		thisId: number;
		/**
		 * MahjongOpCardType
		 */
		opType: number[];
		GetType(): string { return 'Cmd.CardSendObj'; }
	}
	/**
	 * 补牌结构
	 */
	export class FlowerCardObj {
		GetType(): string { return 'Cmd.FlowerCardObj'; }
	}
	/**
	 * 扎鸟结构
	 */
	export class BirdObj {
		uid: number;
		thisId: number;
		isHit: number;
		GetType(): string { return 'Cmd.BirdObj'; }
	}
	/**
	 * 胡牌结构  -- 扎鸟前发
	 */
	export class WinCardObj {
		uid: number;
		opType: number;
		winType: number;
		GetType(): string { return 'Cmd.WinCardObj'; }
	}
	/**
	 * 玩家牌结构
	 */
	export class UserCardObj {
		uid: number;
		/**
		 * 手牌
		 */
		handCardSet: number[];
		/**
		 * 已出牌
		 */
		outCardSet: number[];
		/**
		 * 花牌
		 */
		flowerCardSet: number[];
		/**
		 * 吃牌
		 */
		eatSet: EatCardObj[];
		/**
		 * 杠牌
		 */
		barSet: BarCardObj[];
		/**
		 * 碰牌
		 */
		touchSet: TouchCardObj[];
		/**
		 * 听牌对象集合
		 */
		listenSet: ListenCardObj[];
		/**
		 * 重连时发玩家的分值
		 */
		totalPoints: number;
		/**
		 * 玩家是否亮牌的标志 0不亮，1亮
		 */
		showFlag: number;
		/**
		 * 暗下的牌
		 */
		triCardSet: number[];
		/**
		 * 危牌
		 */
		dangerCardSet: number[];
		/**
		 * 胡牌列表,胡多次时用
		 */
		winSet: WinCardObjNew[];
		/**
		 * 血流血战
		 *  血流血战下发玩家已经胡过的牌
		 */
		winCardSet: number[];
		/**
		 * 放风的牌
		 */
		windCardSet: WindCardObj[];
		/**
		 * 玩家字牌牌堆
		 */
		userZiCard: UserZiCardObj[];
		/**
		 * 结算展示偎牌
		 */
		nestleCardSet: UserZiCardObj[];
		GetType(): string { return 'Cmd.UserCardObj'; }
	}
	export class MultiDetail {
		/**
		 * 番数类型
		 */
		multiType: MultiType;
		/**
		 * 该番型输赢
		 */
		reward: number;
		/**
		 * 1：自摸，2：点炮，3：接炮，4：其他
		 */
		type: number;
		/**
		 * 漳浦麻将发送多个胡牌番型
		 */
		multiSet: number[];
		GetType(): string { return 'Cmd.MultiDetail'; }
	}
	export class RewardObj {
		uid: number;
		nickname: string;
		/**
		 * 每局总输赢
		 */
		totalReward: number;
		/**
		 * 花牌数量
		 */
		flowerCardNum: number;
		/**
		 * 番型输赢明细
		 */
		multiDetailSet: MultiDetail[];
		/**
		 * 玩家手牌
		 */
		userCard: UserCardObj;
		/**
		 * 赢牌类型 0:没赢,1:自摸 2:捡炮 3:放炮 4:金币场破产,5:扎杠胡,6:
		 */
		winType: number;
		/**
		 * 每局结算后的分数
		 */
		points: number;
		/**
		 * 动画效果 0:没有
		 */
		animation: number;
		/**
		 * 是否包赔	0:不是 1:是
		 */
		fullPay: number;
		/**
		 * 总番数,鸡平胡
		 */
		totalMulti: number;
		/**
		 * 番型集合,鸡平胡
		 */
		multiSet: number[];
		/**
		 * 是否爆胡 0:不是 1:是,鸡平胡
		 */
		bomb: number;
		/**
		 * 花牌数量,龙岩用
		 */
		flowerBarNum: number;
		/**
		 * 长沙麻将
		 * 胡牌thisId
		 */
		cardSet: number[];
		/**
		 * 扎鸟thisId
		 */
		birdSet: BirdObj[];
		/**
		 * 卡五星
		 */
		multiPiao: number;
		multiBar: number;
		/**
		 * 输赢钻石倍率
		 */
		betMulti: number;
		/**
		 * 输赢类型,1表示钻石,2表示金币
		 */
		betType: number;
		/**
		 * 玩家中马的数量
		 */
		winHorse: number;
		/**
		 * 摸通时所有的胡牌列表
		 */
		winCardList: WinCardObjNew[];
		/**
		 * 好彩真人
		 *  礼品券
		 */
		giftVoucher: number;
		/**
		 * 中心五
		 *  特殊分
		 */
		specialpoints: number;
		/**
		 * 马牌
		 */
		horseSet: HorseObj[];
		/**
		 * 结算后的金币数
		 */
		diamond: number;
		/**
		 * 领取福卡进度(微信二人麻将)
		 */
		extraBonus: number;
		/**
		 * 诏安麻将
		 *  插台数
		 */
		instablepoint: number;
		GetType(): string { return 'Cmd.RewardObj'; }
	}
	/**
	 * 字牌牌堆结构
	 */
	export class UserZiCardObj {
		/**
		 * 类型
		 */
		type: number;
		/**
		 * 牌型分数
		 */
		point: number;
		/**
		 * 牌列表
		 */
		cardList: number[];
		fromUid: number;
		GetType(): string { return 'Cmd.UserZiCardObj'; }
	}
	export class ChipsObj {
		uid: number;
		/**
		 * 剩余筹码
		 */
		remainder: number;
		GetType(): string { return 'Cmd.ChipsObj'; }
	}
	export class PointsObj {
		uid: number;
		points: number;
		GetType(): string { return 'Cmd.PointsObj'; }
	}
	export class ListenCardObj {
		/**
		 * 听哪一张
		 */
		thisId: number;
		/**
		 * 番数
		 */
		multi: number;
		/**
		 * 剩余张数
		 */
		remainNum: number;
		/**
		 * 剩余张数,简写省流量
		 */
		num: number;
		GetType(): string { return 'Cmd.ListenCardObj'; }
	}
	export class ListenObj {
		listenCardSet: ListenCardObj[];
		/**
		 * 简写省流量
		 */
		lc: ListenCardObj[];
		GetType(): string { return 'Cmd.ListenObj'; }
	}
	export class UserListenObj {
		uid: number;
		listenCardSet: ListenCardObj[];
		/**
		 * 简写省流量
		 */
		lc: ListenCardObj[];
		GetType(): string { return 'Cmd.UserListenObj'; }
	}
	export class UserOpObj {
		/**
		 * 操作者玩家id
		 */
		opId: number;
		/**
		 * MahjongOpCardType
		 */
		opType: number[];
		GetType(): string { return 'Cmd.UserOpObj'; }
	}
	/**
	 * +
	 */
	export class MultiObj {
		/**
		 * 番数类型
		 */
		multiType: number;
		/**
		 * 番数值
		 */
		multi: number;
		GetType(): string { return 'Cmd.MultiObj'; }
	}
	/**
	 * +
	 */
	export class PropInfo {
		/**
		 * 类型 1 购买自用 2 购买送人
		 */
		purchaseType: number;
		/**
		 * 道具Id
		 */
		propId: number;
		/**
		 * 购买玩家Id
		 */
		sendId: number;
		/**
		 * 接收玩家Id 送人时才有值
		 */
		revcId: number;
		GetType(): string { return 'Cmd.PropInfo'; }
	}
	/**
	 * +
	 */
	export class UserGifts {
		uid: number;
		charm: number;
		nickname: string;
		GetType(): string { return 'Cmd.UserGifts'; }
	}
	/**
	 * +
	 */
	export class UserProp {
		/**
		 * 玩家id
		 */
		uid: number;
		/**
		 * 玩家积分
		 */
		points: number;
		/**
		 * vip卡有效期
		 */
		vipCardEffect: number;
		/**
		 * 双倍卡有效期
		 */
		doubleCardEffect: number;
		GetType(): string { return 'Cmd.UserProp'; }
	}
	/**
	 * 出牌结构
	 */
	export class CardOutObj {
		thisId: number;
		/**
		 * 是否被其他玩家吃碰杠
		 */
		isOp: boolean;
		GetType(): string { return 'Cmd.CardOutObj'; }
	}
	/**
	 * 进入房间
	 */
	export class EnterMahjongCmd_C {
		roomId: number;
		/**
		 * 全局唯一房间id
		 */
		globalRoomId: number;
		/**
		 * 游戏id
		 */
		gameId: number;
		/**
		 * 子游戏类型
		 */
		subGameType: number;
		/**
		 * 初始化手牌id,测试用
		 */
		handCardInitId: number;
		/**
		 * 播放录像主角id,如果指定则播放录像
		 */
		recordUid: number;
		/**
		 * 机器人id,可以选择不同的智商
		 */
		robotId: number;
		/**
		 * 启用机器人数量
		 */
		robotNum: number;
		GetType(): string { return 'Cmd.EnterMahjongCmd_C'; }
	}
	/**
	 * 海南麻将动画提示
	 */
	export class DZHNShowMsgCartoon_S {
		/**
		 * 动画id
		 */
		cartoonid: number;
		uid: number;
		GetType(): string { return 'Cmd.DZHNShowMsgCartoon_S'; }
	}
	export class EnterMahjongCmd_S {
		resultCode: number;
		desc: string;
		roomState: Cmd.RoomState;
		/**
		 * 房主uid
		 */
		ownerId: number;
		/**
		 *  2.5D
		 *  牌墙
		 */
		greatWall: GreatWall[];
		/**
		 * 观战字段1表示观战模式
		 */
		visitor: number;
		GetType(): string { return 'Cmd.EnterMahjongCmd_S'; }
	}
	export class LackInfo {
		uid: number;
		cardType: number;
		GetType(): string { return 'Cmd.LackInfo'; }
	}
	export class InsertTableInfo {
		uid: number;
		/**
		 * 插分台数
		 */
		point: number;
		GetType(): string { return 'Cmd.InsertTableInfo'; }
	}
	export class ReConnectMahjongCmd_S {
		/**
		 * 自己的手牌
		 */
		userCard: UserCardObj;
		/**
		 * 其他人手牌,机器人用
		 */
		otherCard: UserCardObj[];
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 当前是第几局
		 */
		curGameNbr: number;
		/**
		 * 进入房间id
		 */
		roomId: number;
		/**
		 * 庄家id
		 */
		bankerId: number;
		/**
		 * 东家id
		 */
		eastUid: number;
		/**
		 * 翻出的金牌
		 */
		goldCardSet: number[];
		/**
		 * 圈风
		 */
		circle: number;
		/**
		 * 门风
		 */
		gate: number;
		/**
		 * 玩家缺牌数据
		 */
		lackInfos: LackInfo[];
		/**
		 * 听牌玩家uid
		 */
		listenUidSet: number[];
		/**
		 * 金华  底分
		 */
		betPoint: number;
		/**
		 * 宁波 翻牌 连庄次数
		 */
		displayCardSet: number[];
		bankerNum: number;
		/**
		 * 梅州
		 */
		horseUid: number;
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		/**
		 * 四川 胡牌的玩家
		 */
		winUser: number[];
		/**
		 * 0 无金牌 1展示的牌是金牌并且有3张  2展示的牌是金牌 不删除 3展示牌的下一张是金牌 并且只有三张
		 */
		goldType: number;
		/**
		 * 听牌集合
		 */
		winCardSet: ListenCardObj[];
		/**
		 *  丽水
		 *  打出去的所有牌 不区分玩家
		 */
		allOutCard: number[];
		/**
		 *  古田麻将
		 * 古田麻将随机花牌数据
		 */
		rfc: number;
		/**
		 * 古田麻将裂开翻金数量
		 */
		num: number;
		/**
		 * 古田麻将翻金类型
		 */
		turnType: number;
		/**
		 * 古田麻将打牌方向
		 */
		direction: number;
		/**
		 *  中心五
		 *  当前角
		 */
		curJiao: number;
		/**
		 * 当前角第几局
		 */
		curNbr: number;
		/**
		 * 2.5D
		 *  起始风位
		 */
		getCardDirection: number;
		/**
		 * 起始摞数
		 */
		startLuo: number;
		/**
		 * 顺序摸牌张数
		 */
		bGetNum: number;
		/**
		 * 逆序摸牌张数
		 */
		eGetNum: number;
		/**
		 *  拉米
		 *  出牌区的牌
		 */
		allHalfCard: CardLine[];
		/**
		 * 废牌区的牌
		 */
		allDisCard: number[];
		/**
		 * 整牌区的牌
		 */
		allCompCard: CardLine[];
		/**
		 * 顾乡恩施
		 *  痞癞杠信息
		 */
		piGoldBarMes: PiGoldBarMes[];
		/**
		 * 文安麻将
		 * 拉庄
		 */
		laZhuangMes: LaZhuangMes[];
		/**
		 * 爬坡次数,新疆杠后
		 */
		climb: number;
		/**
		 * 三铺玩家uid
		 */
		SanpuUserSet: number[];
		/**
		 * 诏安插分
		 * 插分情况
		 */
		instableInfo: InsertTableInfo[];
		GetType(): string { return 'Cmd.ReConnectMahjongCmd_S'; }
	}
	export class PiGoldBarMes {
		uid: number;
		/**
		 * 杠倍数
		 */
		barMul: number;
		/**
		 * 痞杠数
		 */
		piBarCount: number;
		/**
		 * 癞杠数
		 */
		goldBarCount: number;
		/**
		 * 打痞1，打癞2
		 */
		isOutGold: number;
		GetType(): string { return 'Cmd.PiGoldBarMes'; }
	}
	export class LaZhuangMes {
		uid: number;
		/**
		 * 拉庄分
		 */
		point: number;
		GetType(): string { return 'Cmd.LaZhuangMes'; }
	}
	export class CardLine {
		/**
		 * 牌
		 */
		thisId: number[];
		/**
		 * 行号
		 */
		pos: number;
		GetType(): string { return 'Cmd.CardLine'; }
	}
	/**
	 * 广播玩家进入房间
	 */
	export class EnterMahjongCmd_Brd {
		userInfo: Cmd.UserBaseInfo;
		/**
		 * 是否第一次进
		 */
		isFirst: boolean;
		/**
		 * 谁的牌,放录像用,录像播放时是庄家id
		 */
		ownerid: number;
		/**
		 * 是否已听牌,1表示已听牌
		 */
		listened: number;
		GetType(): string { return 'Cmd.EnterMahjongCmd_Brd'; }
	}
	/**
	 * Echo应答,服务器探测玩家是否活着
	 */
	export class ServerEchoMahjongCmd_SC {
		/**
		 * echo标志
		 */
		id: number;
		/**
		 * echo描述,原封不动返回
		 */
		desc: string;
		GetType(): string { return 'Cmd.ServerEchoMahjongCmd_SC'; }
	}
	/**
	 * Echo应答,客户端探测服务器
	 */
	export class ClientEchoMahjongCmd_SC {
		/**
		 * echo标志
		 */
		id: number;
		/**
		 * echo描述,原封不动返回
		 */
		desc: string;
		GetType(): string { return 'Cmd.ClientEchoMahjongCmd_SC'; }
	}
	/**
	 * 在线状态
	 */
	export class OnlineStateMahjongCmd_Brd {
		uid: number;
		/**
		 * 在线状态0断线,1在线,2离开,3,网络差OnlineState
		 */
		state: number;
		/**
		 * 状态变化后的秒数
		 */
		sec: number;
		GetType(): string { return 'Cmd.OnlineStateMahjongCmd_Brd'; }
	}
	/**
	 * 离开房间
	 */
	export class LeaveMahjongCmd_C {
		/**
		 * 离开状态 0 返回大厅 1 暂时离开 2 断线
		 */
		state: number;
		GetType(): string { return 'Cmd.LeaveMahjongCmd_C'; }
	}
	export class LeaveMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.LeaveMahjongCmd_S'; }
	}
	/**
	 * 广播玩家离开房间
	 */
	export class LeaveMahjongCmd_Brd {
		resultCode: number;
		desc: string;
		uid: number;
		state: number;
		GetType(): string { return 'Cmd.LeaveMahjongCmd_Brd'; }
	}
	/**
	 * 加底注
	 */
	export class AddBasePoint_C {
		/**
		 * 加注的分数 0表示不加
		 */
		point: number;
		GetType(): string { return 'Cmd.AddBasePoint_C'; }
	}
	/**
	 * 玩家加注广播,有时间发来表示通知开始加注
	 */
	export class AddBasePoint_Brd {
		/**
		 * 已下注玩家列表
		 */
		userOpList: MultiPointSet[];
		/**
		 * 操作时间（整个加注阶段的时间）
		 */
		sec: number;
		GetType(): string { return 'Cmd.AddBasePoint_Brd'; }
	}
	/**
	 * 加注结构
	 */
	export class MultiPointSet {
		/**
		 * 加注的玩家id
		 */
		uid: number;
		/**
		 * 加注的分数 0表示不加
		 */
		point: number;
		GetType(): string { return 'Cmd.MultiPointSet'; }
	}
	/**
	 * 请求准备
	 */
	export class ReadyStartMahjongCmd_C {
		/**
		 * 判断是准备还是取消准备
		 */
		type: number;
		/**
		 * 单局飘分
		 */
		multiPiao: number;
		/**
		 * 1表示重新洗牌
		 */
		shuffle: number;
		/**
		 * 1:匹配场能挑战更高场次 闯关模式(2:复活 3:重新报名)
		 */
		challenge: number;
		/**
		 * 1表示选择投河，2表示选择不投河
		 */
		touheType: number;
		GetType(): string { return 'Cmd.ReadyStartMahjongCmd_C'; }
	}
	/**
	 * 取消准备
	 */
	export class CancelReadyMahjongCmd_Brd {
		/**
		 * 取消准备玩家ID
		 */
		uid: number;
		GetType(): string { return 'Cmd.CancelReadyMahjongCmd_Brd'; }
	}
	export class ReadyStartMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.ReadyStartMahjongCmd_S'; }
	}
	export class SelectTouHeMahjongCmd_S {
		/**
		 * 选择投河准备玩家ID
		 */
		uid: number;
		GetType(): string { return 'Cmd.SelectTouHeMahjongCmd_S'; }
	}
	/**
	 * 已准备过
	 */
	export class HaveDoReadyMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.HaveDoReadyMahjongCmd_S'; }
	}
	/**
	 * 广播准备
	 */
	export class ReadyStartMahjongCmd_Brd {
		uid: number;
		/**
		 * 所有已准备的玩家uid
		 */
		readyUserSet: number[];
		/**
		 * 单局飘分
		 */
		multiPiao: number;
		/**
		 * 投河类型 ，无类型,1投河,不投河
		 */
		touheType: number;
		GetType(): string { return 'Cmd.ReadyStartMahjongCmd_Brd'; }
	}
	/**
	 * 开局广播
	 */
	export class StartMahjongCmd_Brd {
		/**
		 * 当前是第几局
		 */
		curGameNbr: number;
		/**
		 * 无大厅状态时用
		 */
		roomId: number;
		/**
		 * 圈风
		 */
		circle: number;
		/**
		 * 门风
		 */
		gate: number;
		/**
		 * 金华
		 *  连庄次数
		 */
		bankerNum: number;
		/**
		 * 本局底分
		 */
		betPoint: number;
		/**
		 * 南京麻将，这局是不是有比下胡：0，不是；1，是
		 */
		is_double: number;
		/**
		 * 中心五 当前第几角
		 */
		curJiao: number;
		/**
		 * 中心五 本角第几局
		 */
		curNbr: number;
		/**
		 * 中心五 是否重新开始一角 1:是
		 */
		restart: number;
		/**
		 * 爬坡次数,新疆杠后
		 */
		climb: number;
		GetType(): string { return 'Cmd.StartMahjongCmd_Brd'; }
	}
	export class GreatWall {
		/**
		 * 风位
		 */
		direction: number;
		/**
		 * 牌的总数
		 */
		cardNum: number;
		GetType(): string { return 'Cmd.GreatWall'; }
	}
	/**
	 * 定庄打筛子
	 */
	export class SetBankerMahjongCmd_Brd {
		dice: DiceObj;
		/**
		 * 庄家id
		 */
		bankerId: number;
		/**
		 * 东家id
		 */
		eastUid: number;
		/**
		 * 定庄倒计时
		 */
		sec: number;
		/**
		 * 梅州
		 */
		horseUid: number;
		/**
		 * 倍率
		 */
		multi: number;
		lastdice: DiceObj;
		/**
		 *  2.5D 麻将
		 *  牌墙
		 */
		greatWall: GreatWall[];
		/**
		 * 开始抓拍的风位
		 */
		getCardDirection: number;
		/**
		 * 开始的摞数
		 */
		startLuo: number;
		GetType(): string { return 'Cmd.SetBankerMahjongCmd_Brd'; }
	}
	/**
	 * 开局拉庄
	 */
	export class SetLaZhuangMahjongCmd_Brd {
		uids: number[];
		/**
		 * 拉庄标记
		 */
		laZhuang: boolean;
		/**
		 * 拉庄倒计时
		 */
		sec: number;
		GetType(): string { return 'Cmd.SetLaZhuangMahjongCmd_Brd'; }
	}
	export class LaZhuangMahjongCmd_Brd {
		uid: number;
		/**
		 * 拉庄分
		 */
		point: number;
		GetType(): string { return 'Cmd.LaZhuangMahjongCmd_Brd'; }
	}
	export class LaZhuangMahjongCmd_C {
		/**
		 * 拉庄分
		 */
		point: number;
		GetType(): string { return 'Cmd.LaZhuangMahjongCmd_C'; }
	}
	/**
	 * 开局发牌
	 */
	export class SelfCardMahjongCmd_S {
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 自己的手牌
		 */
		userCard: UserCardObj;
		/**
		 * 其他人手牌,机器人用
		 */
		otherCard: UserCardObj[];
		/**
		 * 庄家第一张牌倒计时
		 */
		sec: number;
		/**
		 * 庄家第十四张牌,只有庄加有
		 */
		bankerThisId: number;
		/**
		 * 谁的牌,放录像用
		 */
		ownerid: number;
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		/**
		 * 南京麻将用开局花杠
		 */
		flbarUser: number[];
		/**
		 * 洗牌者id
		 */
		shuffleUid: number;
		GetType(): string { return 'Cmd.SelfCardMahjongCmd_S'; }
	}
	/**
	 * 原缺通知
	 */
	export class OriginalLackOpCmd_S {
		GetType(): string { return 'Cmd.OriginalLackOpCmd_S'; }
	}
	/**
	 * 原缺等待时间
	 */
	export class OriginalLackOpTimeCmd_Brd {
		sec: number;
		GetType(): string { return 'Cmd.OriginalLackOpTimeCmd_Brd'; }
	}
	/**
	 * 原缺操作
	 */
	export class OriginalLackOpCmd_C {
		GetType(): string { return 'Cmd.OriginalLackOpCmd_C'; }
	}
	/**
	 * 原缺操作广播
	 */
	export class OriginalLackOpCmd_Brd {
		uid: number;
		cardSet: number[];
		GetType(): string { return 'Cmd.OriginalLackOpCmd_Brd'; }
	}
	/**
	 * 定缺通知
	 */
	export class EnsureLackOpCmd_S {
		/**
		 * 万条筒
		 */
		cardType: number;
		sec: number;
		/**
		 * 庄家id
		 */
		bankerId: number;
		/**
		 * 发给谁的，录像使用
		 */
		ownerid: number;
		GetType(): string { return 'Cmd.EnsureLackOpCmd_S'; }
	}
	/**
	 * 定缺操作
	 */
	export class EnsureLackOpCmd_C {
		/**
		 * 万条筒
		 */
		cardType: number;
		GetType(): string { return 'Cmd.EnsureLackOpCmd_C'; }
	}
	/**
	 * 定缺操作广播
	 */
	export class EnsureLackOpCmd_Brd {
		uid: number;
		cardType: number;
		GetType(): string { return 'Cmd.EnsureLackOpCmd_Brd'; }
	}
	/**
	 * 补花
	 */
	export class FlowerMahjongCmd_Brd {
		/**
		 * 玩家uid
		 */
		uid: number;
		/**
		 * 补给玩家手中的花牌,显示给所有玩家
		 */
		flowerSet: number[];
		/**
		 * 补给自己的牌,只会发给自己
		 */
		myCardSet: number[];
		/**
		 * 补牌后牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		/**
		 * 2.5D是否是开局补花: 是 1  否 0
		 */
		startRound: number;
		GetType(): string { return 'Cmd.FlowerMahjongCmd_Brd'; }
	}
	/**
	 * 翻金
	 */
	export class TurnGoldMahjongCmd_Brd {
		/**
		 * 翻出的金牌
		 */
		cardSet: number[];
		/**
		 * 翻金后牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 宁波 翻牌
		 */
		displayCardSet: number[];
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		/**
		 * 0 无金牌 1展示的牌是金牌并且有3张  2展示的牌是金牌 不删除 3展示牌的下一张是金牌 并且只有三张
		 */
		goldType: number;
		/**
		 *  古田麻将 随机花牌
		 *  翻出来的随机花牌
		 */
		randomFlowerCard: number;
		/**
		 * 玩家uid
		 */
		uid: number;
		/**
		 *  2.5D
		 * 翻金的数量
		 */
		cardNum: number;
		GetType(): string { return 'Cmd.TurnGoldMahjongCmd_Brd'; }
	}
	/**
	 * 摸牌（字牌）
	 */
	export class SendZiCardCmd_S {
		thisId: number;
		uid: number;
		/**
		 * MahjongOpCardType
		 */
		opType: number[];
		/**
		 * 打完之后可以听牌集合
		 */
		listenSet: number[];
		/**
		 * 听牌数量
		 */
		listenObjSet: ListenObj[];
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 谁的牌,放录像用
		 */
		ownerid: number;
		/**
		 * 摸牌类型(2:庄家起手模拟发牌  10:吃碰后模拟发牌)
		 */
		getCardType: number;
		/**
		 * 吃牌列表
		 */
		eatSet: EatCardObj[];
		/**
		 * 抢胡牌列表
		 */
		grabWinCardSet: number[];
		/**
		 * 摸牌时更新一下听牌列表
		 */
		winCardSet: ListenCardObj[];
		GetType(): string { return 'Cmd.SendZiCardCmd_S'; }
	}
	/**
	 * 摸牌
	 */
	export class SendCardMahjongCmd_S {
		thisId: number;
		/**
		 * MahjongOpCardType
		 */
		opType: number[];
		/**
		 * 是否杠后牌摸
		 */
		isBar: number;
		/**
		 * 打完之后可以听牌集合
		 */
		listenSet: number[];
		/**
		 * 听牌数量
		 */
		listenObjSet: ListenObj[];
		/**
		 * 可杠的牌id
		 */
		barSet: number[];
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		goldOutCardSet: number[];
		/**
		 * 可补张的牌id
		 */
		supplySet: number[];
		triCard: number[];
		/**
		 * 谁的牌,放录像用
		 */
		ownerid: number;
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		/**
		 * 打完之后可以听牌集合,简写省流量
		 */
		ls: number[];
		/**
		 * 听牌数量,简写省流量
		 */
		los: ListenObj[];
		/**
		 * 是否重置听牌信息
		 */
		resetListen: number;
		/**
		 * 厦门麻将有大牌模式下发跟牌数据
		 */
		fcs: FollowCardSet;
		/**
		 * 云霄麻将 听牌后的暗杠玩家可选择暗杠或明杠的牌id
		 */
		darkBarSet: number[];
		/**
		 * 摸牌类型(2:庄家起手模拟发牌  10:吃碰后模拟发牌)
		 */
		getCardType: number;
		/**
		 * 可叠加的风牌
		 */
		windSet: number[];
		/**
		 * 可换混的牌
		 */
		replaceWindSet: number[];
		/**
		 * 可亮中发白的牌组
		 */
		showCardSet: number[];
		/**
		 * 顧鄉恩施麻將第一個杠牌的人標誌
		 */
		firstDoBar: number;
		/**
		 * 金坎牌集
		 */
		jinkanSet: number[];
		/**
		 * 多张胡牌牌集
		 */
		listenmoreSet: number[];
		GetType(): string { return 'Cmd.SendCardMahjongCmd_S'; }
	}
	/**
	 * 刷新指定玩家手牌
	 */
	export class RefreshUserCards_S {
		/**
		 * 带刷新的玩家的牌
		 */
		userCard: UserCardObj;
		GetType(): string { return 'Cmd.RefreshUserCards_S'; }
	}
	/**
	 * 叠加（换混）牌协议
	 */
	export class SuperPosition_CS {
		/**
		 * 玩家uid
		 */
		uid: number;
		/**
		 * 叠加牌的ID（如果inCardId存在该值表示需要换出的牌）
		 */
		cardId: number;
		/**
		 * 操作列表 MahjongOpCardType
		 */
		opType: number[];
		/**
		 * 操作后返回的风牌结构
		 */
		windCardSet: WindCardObj;
		/**
		 * 需要换入牌的ID
		 */
		inCardId: number;
		/**
		 * 操作时间
		 */
		sec: number;
		GetType(): string { return 'Cmd.SuperPosition_CS'; }
	}
	/**
	 * 放风放喜堆结构
	 */
	export class WindCardObj {
		/**
		 * 当前这堆牌的index（方便换混叠加）
		 */
		index: number;
		/**
		 * 玩家放风的牌
		 */
		cardSet: number[];
		GetType(): string { return 'Cmd.WindCardObj'; }
	}
	/**
	 * 放风推荐牌
	 */
	export class WindCardThree {
		thisIdList: number[];
		GetType(): string { return 'Cmd.WindCardThree'; }
	}
	/**
	 * 放风
	 */
	export class SendWindMahjongCmd_CS {
		/**
		 * 放风玩家uid
		 */
		uid: number;
		/**
		 * C:玩家是否放风false表示不放 S：玩家是否能放风true表示能放
		 */
		state: boolean;
		/**
		 * 玩家放的牌
		 */
		cardList: WindCardObj;
		/**
		 * 操作时间
		 */
		sec: number;
		/**
		 * 放风推荐牌
		 */
		list: WindCardThree[];
		GetType(): string { return 'Cmd.SendWindMahjongCmd_CS'; }
	}
	/**
	 * 跟牌集合
	 */
	export class FollowCardSet {
		cardThisId: number[];
		GetType(): string { return 'Cmd.FollowCardSet'; }
	}
	/**
	 * 大连打宝消息
	 */
	export class DaBaoMahjongCmd_C {
		/**
		 * listenSet下标,
		 */
		index: number;
		/**
		 * listenSet的thisId,为了建容,0表示获取所有听牌列表
		 */
		thisId: number;
		GetType(): string { return 'Cmd.DaBaoMahjongCmd_C'; }
	}
	/**
	 * 请求听牌提示,不能每次发,太浪费流量了
	 */
	export class ListenObjMahjongCmd_C {
		/**
		 * listenSet下标,
		 */
		index: number;
		/**
		 * listenSet的thisId,为了建容,0表示获取所有听牌列表
		 */
		thisId: number;
		GetType(): string { return 'Cmd.ListenObjMahjongCmd_C'; }
	}
	export class ListenObjMahjongCmd_S {
		/**
		 * listenSet下标
		 */
		index: number;
		/**
		 * listenSet的thisId,为了建容
		 */
		thisId: number;
		/**
		 * 听牌数量,简写省流量
		 */
		los: ListenObj;
		resultCode: number;
		GetType(): string { return 'Cmd.ListenObjMahjongCmd_S'; }
	}
	export class ListenObjThisId {
		thisId: number;
		/**
		 * 听牌数量,简写省流量
		 */
		los: ListenObj;
		GetType(): string { return 'Cmd.ListenObjThisId'; }
	}
	export class AllListenObjMahjongCmd_S {
		/**
		 * 所有听牌数量,简写省流量
		 */
		list: ListenObjThisId[];
		GetType(): string { return 'Cmd.AllListenObjMahjongCmd_S'; }
	}
	/**
	 * 广播摸牌信息
	 */
	export class SendCardMahjongCmd_Brd {
		/**
		 * 出牌者id
		 */
		uid: number;
		/**
		 * 出牌倒计时
		 */
		sec: number;
		/**
		 * 流局
		 */
		isWin: number;
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * GM指令调试用,release版本不会发
		 */
		thisId: number;
		/**
		 * 是否起牌
		 */
		stand: number;
		/**
		 * 是否是开局四川换牌后的模拟发牌
		 */
		isSichuan: number;
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		/**
		 * 出牌者座位id,用来换算uid,优化消息流量用
		 */
		sid: number;
		/**
		 * 摸牌类型(2:庄家起手模拟发牌  10:吃碰后模拟发牌  1:杠后摸牌)
		 */
		getCardType: number;
		/**
		 * 云霄麻将的流局提醒消息
		 */
		readyDrawgame: number;
		GetType(): string { return 'Cmd.SendCardMahjongCmd_Brd'; }
	}
	/**
	 * 放弃一个操作
	 */
	export class CancelOpTypeMahjongCmd_CS {
		/**
		 * 需要放弃的关键操作,加个日志,有玩家纠结时查日志用,只用来存录像
		 */
		opType: number[];
		GetType(): string { return 'Cmd.CancelOpTypeMahjongCmd_CS'; }
	}
	/**
	 * 请求出牌
	 */
	export class OutCardMahjongCmd_C {
		thisId: number;
		/**
		 * 是否天听
		 */
		isSkyListen: boolean;
		/**
		 * 1请求听牌,MahjongOpCardType_Listen
		 */
		listen: number;
		/**
		 * 抻吊牌id
		 */
		chendiaoid: number;
		GetType(): string { return 'Cmd.OutCardMahjongCmd_C'; }
	}
	export class OutCardMahjongCmd_S {
		thisId: number;
		winCardSet: ListenCardObj[];
		resultCode: number;
		desc: string;
		ws: ListenCardObj[];
		/**
		 * 是否重置听牌信息
		 */
		resetListen: number;
		GetType(): string { return 'Cmd.OutCardMahjongCmd_S'; }
	}
	export class OutCardAttentionCmd_S {
		/**
		 * 出牌者id
		 */
		uid: number;
		GetType(): string { return 'Cmd.OutCardAttentionCmd_S'; }
	}
	/**
	 * 字牌出牌完成消息(字牌用)
	 */
	export class OutCardSuccessCmd_Brd {
		/**
		 * 出牌的id
		 */
		thisId: number;
		uid: number;
		GetType(): string { return 'Cmd.OutCardSuccessCmd_Brd'; }
	}
	/**
	 * 广播出牌内容
	 */
	export class OutCardMahjongCmd_Brd {
		/**
		 * 出牌者id
		 */
		uid: number;
		/**
		 * 时间倒数
		 */
		sec: number;
		thisId: number;
		/**
		 * 错做类型集合
		 */
		opType: number[];
		/**
		 * 错做类型集合
		 */
		eatSet: EatCardObj[];
		/**
		 * 是否跟牌
		 */
		isFollow: number;
		/**
		 * 牌的类型,比如捉鸡牌
		 */
		cardType: number;
		/**
		 * 刷新其他玩家的听牌剩余张数
		 */
		winCardSet: ListenCardObj[];
		/**
		 * 是否有人可操作 1:有
		 */
		isOp: number;
		/**
		 * 出牌者座位id,用来换算uid,优化消息流量用
		 */
		sid: number;
		/**
		 * 游金值
		 */
		isSwimGold: number;
		/**
		 * 打痞1，打癩2
		 */
		isOutGold: number;
		GetType(): string { return 'Cmd.OutCardMahjongCmd_Brd'; }
	}
	/**
	 * GM指令,发所有牌堆给玩家
	 */
	export class HeapCardGmMahjongCmd_C {
		GetType(): string { return 'Cmd.HeapCardGmMahjongCmd_C'; }
	}
	export class KeyValueObj {
		id: number;
		value: string;
		GetType(): string { return 'Cmd.KeyValueObj'; }
	}
	/**
	 * GM指令,发所有牌堆给玩家
	 */
	export class HeapCardGmMahjongCmd_S {
		/**
		 * 牌堆剩余牌
		 */
		cardSet: number[];
		/**
		 * 牌型选择按钮
		 */
		cardButton: KeyValueObj[];
		GetType(): string { return 'Cmd.HeapCardGmMahjongCmd_S'; }
	}
	/**
	 * GM指令,请求换一张牌
	 */
	export class ChangeCardGmMahjongCmd_C {
		/**
		 * 旧牌
		 */
		oldCardId: number;
		/**
		 * 新牌,如果自己是操作者时发0,新牌通过摸牌消息发
		 */
		newCardId: number;
		/**
		 * 牌型ID
		 */
		cardButtonId: number;
		GetType(): string { return 'Cmd.ChangeCardGmMahjongCmd_C'; }
	}
	/**
	 * GM指令,请求换一张牌
	 */
	export class ChangeCardGmMahjongCmd_S {
		/**
		 * 旧牌
		 */
		oldCardId: number;
		/**
		 * 新牌,如果自己是操作者时发0,新牌通过摸牌消息发
		 */
		newCardId: number;
		winCardSet: ListenCardObj[];
		/**
		 * 如果自己是操作者,就删除牌,否则就是换牌,
		 */
		needDelete: number;
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		GetType(): string { return 'Cmd.ChangeCardGmMahjongCmd_S'; }
	}
	/**
	 * 撤回一张牌,回放用
	 */
	export class RecallOneCardMahjongCmd_S {
		uid: number;
		/**
		 * 撤回的牌
		 */
		thisId: number;
		GetType(): string { return 'Cmd.RecallOneCardMahjongCmd_S'; }
	}
	export class RecallEatCardMahjongCmd_Brd {
		msg: EatCardMahjongCmd_Brd;
		GetType(): string { return 'Cmd.RecallEatCardMahjongCmd_Brd'; }
	}
	export class RecallTouchCardMahjongCmd_Brd {
		msg: TouchCardMahjongCmd_Brd;
		GetType(): string { return 'Cmd.RecallTouchCardMahjongCmd_Brd'; }
	}
	export class RecallBarCardMahjongCmd_Brd {
		msg: BarCardMahjongCmd_Brd;
		GetType(): string { return 'Cmd.RecallBarCardMahjongCmd_Brd'; }
	}
	export class RecallSupplyCardMahjongCmd_Brd {
		msg: SupplyCardMahjongCmd_Brd;
		GetType(): string { return 'Cmd.RecallSupplyCardMahjongCmd_Brd'; }
	}
	export class RecallWinCardMahjongCmd_Brd {
		msg: WinCardMahjongCmd_Brd;
		GetType(): string { return 'Cmd.RecallWinCardMahjongCmd_Brd'; }
	}
	export class HaveSanPuSuccessCmd_Brd {
		/**
		 * 三铺者id
		 */
		uid: number;
		GetType(): string { return 'Cmd.HaveSanPuSuccessCmd_Brd'; }
	}
	/**
	 * 四川开局换牌用
	 */
	export class exChangeCardMahjongCmd_S {
		/**
		 * 开局换牌时候数量少于3个的花色
		 */
		disType: number[];
		/**
		 * 时间
		 */
		opcount: number;
		/**
		 * 庄家id 防止此协议重连报错
		 */
		bankerId: number;
		/**
		 * 买牌标识: 0:未买牌; 1:买牌
		 */
		bcs: number;
		/**
		 * 是否可选不同花色 1:可以 0:不可以
		 */
		isSame: number;
		/**
		 * 发给谁的，录像使用
		 */
		ownerid: number;
		GetType(): string { return 'Cmd.exChangeCardMahjongCmd_S'; }
	}
	/**
	 * 四川开局换牌用
	 */
	export class exChangeCardMahjongCmd_C {
		/**
		 * 开局换牌需要更换的牌
		 */
		cardId: number[];
		GetType(): string { return 'Cmd.exChangeCardMahjongCmd_C'; }
	}
	/**
	 * 四川开局换牌用
	 */
	export class exChangeCardMahjongCmd_Brd {
		/**
		 * 已经换牌的玩家
		 */
		userId: number;
		/**
		 * 如果没有手动操作，系统自动挑选3张牌
		 */
		cardId: number[];
		GetType(): string { return 'Cmd.exChangeCardMahjongCmd_Brd'; }
	}
	/**
	 * 万州麻将买牌广播
	 */
	export class BuyCardMahjongCmd_Brd {
		/**
		 * 买牌时间
		 */
		sec: number;
		GetType(): string { return 'Cmd.BuyCardMahjongCmd_Brd'; }
	}
	/**
	 * 玩家请求买牌
	 */
	export class UserBuyCardMahjongCmd_C {
		/**
		 * 是否买牌标示，0:取消; 1:买牌
		 */
		state: number;
		GetType(): string { return 'Cmd.UserBuyCardMahjongCmd_C'; }
	}
	/**
	 * 取消操作牌
	 */
	export class CancelOpMahjongCmd_C {
		/**
		 * 取消操作台里的第一个操作
		 */
		firstType: number;
		GetType(): string { return 'Cmd.CancelOpMahjongCmd_C'; }
	}
	export class CancelOpMahjongCmd_S {
		/**
		 * 兼容金华 用于区分敲响和胡 2:取消敲响
		 */
		resultCode: number;
		GetType(): string { return 'Cmd.CancelOpMahjongCmd_S'; }
	}
	/**
	 * 请求胡牌
	 */
	export class WinMahjongCmd_C {
		GetType(): string { return 'Cmd.WinMahjongCmd_C'; }
	}
	/**
	 * 胡牌广播
	 */
	export class WinCardMahjongCmd_Brd {
		/**
		 * 其他人手牌 目前来说只要手牌handCardSet
		 */
		otherCard: UserCardObj[];
		/**
		 * 胡牌的玩家
		 */
		winTypeSet: WinCardObj[];
		/**
		 * 这里加一个放炮玩家id,方便显示放炮动画
		 */
		shootId: number;
		GetType(): string { return 'Cmd.WinCardMahjongCmd_Brd'; }
	}
	/**
	 * 扎鸟广播
	 */
	export class BirdMahjongCmd_Brd {
		birdSet: BirdObj[];
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		GetType(): string { return 'Cmd.BirdMahjongCmd_Brd'; }
	}
	export class WinMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.WinMahjongCmd_S'; }
	}
	export class WinPointObj {
		uid: number;
		point: number;
		GetType(): string { return 'Cmd.WinPointObj'; }
	}
	/**
	 * 多次胡牌的过程中广播
	 */
	export class WinMahjongCmd_Brd {
		/**
		 * 胡牌人id
		 */
		uid: number;
		/**
		 * 不填表示自摸
		 */
		thisId: number;
		/**
		 * 不填表示自摸
		 */
		shootId: number;
		/**
		 * 胡牌动画,不填就是默认
		 */
		animation: number;
		/**
		 * 中途结算每个人的分数情况
		 */
		pointSet: WinPointObj[];
		GetType(): string { return 'Cmd.WinMahjongCmd_Brd'; }
	}
	export class HorseObj {
		thisId: number;
		/**
		 * 0:没中 1:中马
		 */
		bWin: number;
		GetType(): string { return 'Cmd.HorseObj'; }
	}
	export class WinCardObjNew {
		/**
		 * 不填表示自摸
		 */
		shootId: number;
		thisId: number;
		GetType(): string { return 'Cmd.WinCardObjNew'; }
	}
	/**
	 * 广播胡牌结果
	 */
	export class WinRetMahjongCmd_Brd {
		rewardSet: RewardObj[];
		/**
		 * 胡牌 牌id
		 */
		thisId: number;
		/**
		 * 马牌 凤城麻将宝牌
		 */
		horseSet: HorseObj[];
		/**
		 * 中马数
		 */
		winHorse: number;
		/**
		 * 放炮 uid
		 */
		shootId: number;
		/**
		 * 中马玩家uid
		 */
		winHorseId: number;
		/**
		 * 长沙麻将
		 */
		isWin: number;
		/**
		 * 梅州
		 */
		horseUid: number;
		/**
		 * 宝牌	  凤城麻将
		 */
		baoCardThisId: number;
		/**
		 * 扎鸟thisId
		 */
		birdSet: BirdObj[];
		/**
		 * 牌堆剩余牌
		 */
		leftCard: number[];
		/**
		 * 洗牌者id
		 */
		shuffleUid: number;
		/**
		 * 不填或者0表示免费,填了就是消耗几个钻
		 */
		shuffleCost: number;
		/**
		 * 为1 时显示过低保护提示
		 */
		protectInfo: number;
		/**
		 * 抓马thisid
		 */
		zhuamaset: number[];
		GetType(): string { return 'Cmd.WinRetMahjongCmd_Brd'; }
	}
	export class ChickenStruct {
		uid: number;
		/**
		 * 我的分（倒赔或赢）
		 */
		myself_grade: number;
		/**
		 * 别人对我的影响分（赔或赢）
		 */
		others_grade: number;
		/**
		 * 冲锋鸡
		 */
		rush_chicken: number;
		/**
		 * 责任鸡
		 */
		response_chicken: number;
		/**
		 * 上鸡baseid
		 */
		up_baseid: number;
		/**
		 * 下鸡baseid
		 */
		down_baseid: number;
		/**
		 * 上鸡
		 */
		up_chicken: number;
		/**
		 * 下鸡
		 */
		down_chicken: number;
		/**
		 * 闷豆
		 */
		dark: number;
		/**
		 * 明豆
		 */
		light: number;
		/**
		 * 爬坡豆
		 */
		climb: number;
		/**
		 * 是否听牌
		 */
		is_listen: boolean;
		/**
		 * 查缺分数
		 */
		lack: number;
		/**
		 * 原缺
		 */
		originalLack: number;
		/**
		 * 冲锋乌骨鸡
		 */
		rush_black_chicken: number;
		/**
		 * 责任乌骨鸡
		 */
		response_black_chicken: number;
		/**
		 * 普通乌骨鸡
		 */
		normal_black_chicken: number;
		/**
		 * 上鸡鸡牌数量
		 */
		up_chicken_num: number;
		/**
		 * 下鸡鸡牌数量
		 */
		down_chicken_num: number;
		/**
		 * 点明豆数量
		 */
		sub_light: number;
		/**
		 * 本鸡
		 */
		self_chicken: number;
		GetType(): string { return 'Cmd.ChickenStruct'; }
	}
	/**
	 * 抓鸡
	 */
	export class CashChickenCmd_Brd {
		chicken_card_id: number;
		rewardSet: RewardObj[];
		chickenSet: ChickenStruct[];
		/**
		 * 兼容
		 */
		cid: number;
		/**
		 * 兼容
		 */
		rs: RewardObj[];
		/**
		 * 兼容
		 */
		cs: ChickenStruct[];
		GetType(): string { return 'Cmd.CashChickenCmd_Brd'; }
	}
	/**
	 * 天听000000000000000000
	 */
	export class SkyListenCmd_S {
		sec: number;
		GetType(): string { return 'Cmd.SkyListenCmd_S'; }
	}
	/**
	 * 只在开局天听使用
	 */
	export class SkyListenCmd_C {
		GetType(): string { return 'Cmd.SkyListenCmd_C'; }
	}
	export class SkyListenCmd_Brd {
		uid: number;
		GetType(): string { return 'Cmd.SkyListenCmd_Brd'; }
	}
	/**
	 * 请求杠牌
	 */
	export class BarCardMahjongCmd_C {
		thisId: number;
		/**
		 * 1请求听牌,MahjongOpCardType_Listen
		 */
		listen: number;
		/**
		 * 云霄麻将 暗杠选择暗杠还是明杠 1:明杠 2:暗杠
		 */
		typ: number;
		/**
		 * 云南麻将 杠牌选择金牌数量
		 */
		goldnum: number;
		GetType(): string { return 'Cmd.BarCardMahjongCmd_C'; }
	}
	/**
	 * 请求选牌
	 */
	export class PickCardMahjongCmd_C {
		thisId: number;
		GetType(): string { return 'Cmd.PickCardMahjongCmd_C'; }
	}
	export class PickCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.PickCardMahjongCmd_S'; }
	}
	/**
	 * 软杠挑牌
	 */
	export class PickBarGoldMahjongCmd_C {
		thisId: number;
		GetType(): string { return 'Cmd.PickBarGoldMahjongCmd_C'; }
	}
	export class PickBarGoldMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.PickBarGoldMahjongCmd_S'; }
	}
	/**
	 * 挑牌后的广播
	 */
	export class PickBarGoldMahjongCmd_Brd {
		uid: number;
		/**
		 * 乐山麻将挑牌后的杠牌
		 */
		barset: number[];
		GetType(): string { return 'Cmd.PickBarGoldMahjongCmd_Brd'; }
	}
	export class BarCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.BarCardMahjongCmd_S'; }
	}
	export class TwoBarCardMahjongCmd_Brd {
		/**
		 * 云南麻将杠牌牌堆
		 */
		uid: number[];
		GetType(): string { return 'Cmd.TwoBarCardMahjongCmd_Brd'; }
	}
	export class PickBarCardMahjongCmd_S {
		uid: number;
		GetType(): string { return 'Cmd.PickBarCardMahjongCmd_S'; }
	}
	export class SendNoDiamondCmd_S {
		uid: number;
		GetType(): string { return 'Cmd.SendNoDiamondCmd_S'; }
	}
	/**
	 * 任丘  请求风,箭
	 */
	export class FengCardMahjongCmd_C {
		thisId: number;
		/**
		 * 1请求听牌,MahjongOpCardType_Listen
		 */
		listen: number;
		/**
		 * 云霄麻将 暗杠选择暗杠还是明杠 1:明杠 2:暗杠
		 */
		typ: number;
		/**
		 * 1风2箭
		 */
		tag: number;
		GetType(): string { return 'Cmd.FengCardMahjongCmd_C'; }
	}
	export class FengCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.FengCardMahjongCmd_S'; }
	}
	/**
	 * 杠牌堆结构
	 */
	export class BarCardObj {
		/**
		 * 碰牌的玩家
		 */
		uid: number;
		/**
		 * 碰牌后的三张thisid
		 */
		thisId: number;
		/**
		 * 碰牌后的三张thisid
		 */
		cardSet: number[];
		/**
		 * 被碰的玩家
		 */
		fromUid: number;
		/**
		 * 杠的类型MahjongOpCardType_BarOther
		 */
		barType: number;
		/**
		 * 虚拟操作,优先级问题
		 */
		fake: number;
		GetType(): string { return 'Cmd.BarCardObj'; }
	}
	/**
	 * 长沙麻将杠牌结构
	 */
	export class BarDealCardObj {
		thisId: number;
		/**
		 * 是否胡这张牌
		 */
		isHu: number;
		GetType(): string { return 'Cmd.BarDealCardObj'; }
	}
	/**
	 * 广播提牌
	 */
	export class LiftCardMahjongCmd_Brd {
		/**
		 * 碰牌的玩家
		 */
		obj: BarCardObj[];
		/**
		 * 只在碰杠时 是否可抢杠胡 分别发送 1:可胡 0:不可胡
		 */
		canWin: number;
		thisId: number;
		/**
		 * 类型
		 */
		card_type: number;
		/**
		 * 录像使用的ownerid
		 */
		ownerid: number;
		/**
		 * 在亮中发白时候可以被抢碰 1:可以碰 2:不可碰
		 */
		canTouch: number;
		GetType(): string { return 'Cmd.LiftCardMahjongCmd_Brd'; }
	}
	/**
	 * 广播杠牌
	 */
	export class BarCardMahjongCmd_Brd {
		/**
		 * 碰牌的玩家
		 */
		obj: BarCardObj;
		/**
		 * 只在碰杠时 是否可抢杠胡 分别发送 1:可胡 0:不可胡
		 */
		canWin: number;
		thisId: number;
		/**
		 * 类型
		 */
		card_type: number;
		/**
		 * 录像使用的ownerid
		 */
		ownerid: number;
		/**
		 * 在亮中发白时候可以被抢碰 1:可以碰 2:不可碰
		 */
		canTouch: number;
		GetType(): string { return 'Cmd.BarCardMahjongCmd_Brd'; }
	}
	/**
	 * 开杠打筛子
	 */
	export class BarDiceMahjongCmd_Brd {
		dice: DiceObj;
		/**
		 * 开杠uid
		 */
		barUid: number;
		GetType(): string { return 'Cmd.BarDiceMahjongCmd_Brd'; }
	}
	/**
	 * 开杠发牌 --- 其他人看到自己摸了两张牌
	 */
	export class BarDealCardMahjongCmd_Brd {
		uid: number;
		/**
		 * 牌堆剩余牌数
		 */
		heapCardNum: number;
		/**
		 * 杠牌出牌倒计时
		 */
		sec: number;
		/**
		 * GM指令调试用,release版本不会发
		 */
		cardSet: number[];
		/**
		 * 牌堆剩余牌数,简写省流量
		 */
		hn: number;
		GetType(): string { return 'Cmd.BarDealCardMahjongCmd_Brd'; }
	}
	export class BarDealCardMahjongCmd_S {
		/**
		 * 牌信息
		 */
		cardSet: BarDealCardObj[];
		/**
		 * 可以进行的操作
		 */
		opType: number[];
		GetType(): string { return 'Cmd.BarDealCardMahjongCmd_S'; }
	}
	/**
	 * 开杠玩家操作
	 */
	export class BarOpMahjongCmd_C {
		opType: number;
		GetType(): string { return 'Cmd.BarOpMahjongCmd_C'; }
	}
	/**
	 * 海底漫游 轮转广播
	 */
	export class SeaRoamTurnMahjongCmd_Brd {
		uid: number;
		sec: number;
		GetType(): string { return 'Cmd.SeaRoamTurnMahjongCmd_Brd'; }
	}
	/**
	 * 海底漫游操作请求
	 */
	export class SeaRoamMahjongCmd_C {
		opType: number;
		GetType(): string { return 'Cmd.SeaRoamMahjongCmd_C'; }
	}
	/**
	 * 海底牌广播
	 */
	export class SeaFloorCardMahjongCmd_Brd {
		uid: number;
		thisId: number;
		/**
		 * 多加了一张漫游牌
		 */
		thisId2: number;
		GetType(): string { return 'Cmd.SeaFloorCardMahjongCmd_Brd'; }
	}
	/**
	 * 开杠打牌广播
	 */
	export class BarOutCardMahjongCmd_Brd {
		oneThisId: number;
		twoThisId: number;
		/**
		 * 可以进行的操作
		 */
		opType: number[];
		barSet: number[];
		supplySet: number[];
		touchSet: number[];
		eatSet: EatCardObj[];
		uid: number;
		sec: number;
		threeThisId: number;
		fourThisId: number;
		GetType(): string { return 'Cmd.BarOutCardMahjongCmd_Brd'; }
	}
	/**
	 * 比牌牌堆
	 */
	export class CompareCardObj {
		one: number;
		two: number;
		/**
		 * 比掉的牌的id(先弃用)
		 */
		thisId: number;
		/**
		 * 比牌组合列表
		 */
		compareGroup: CompareCardObj[];
		GetType(): string { return 'Cmd.CompareCardObj'; }
	}
	/**
	 * 碰牌堆结构
	 */
	export class EatCardObj {
		/**
		 * 碰牌的玩家
		 */
		uid: number;
		/**
		 * 碰牌后的三张thisid
		 */
		thisId: number;
		one: number;
		two: number;
		/**
		 * 被碰的玩家
		 */
		fromUid: number;
		/**
		 * 虚拟操作,优先级问题
		 */
		fake: number;
		/**
		 * 比牌牌堆
		 */
		compareSet: CompareCardObj[];
		/**
		 * 比牌用到的thisIds集合
		 */
		thisIds: number[];
		GetType(): string { return 'Cmd.EatCardObj'; }
	}
	/**
	 * 比牌请求
	 */
	export class CompareCardCmd_C {
		/**
		 * 比牌
		 */
		obj: EatCardObj;
		GetType(): string { return 'Cmd.CompareCardCmd_C'; }
	}
	/**
	 * 比牌请求返回
	 */
	export class CompareCardCmd_Brd {
		/**
		 * 直接返回吃牌的结构吧
		 */
		obj: EatCardObj;
		GetType(): string { return 'Cmd.CompareCardCmd_Brd'; }
	}
	/**
	 * 请求吃牌
	 */
	export class EatCardMahjongCmd_C {
		one: number;
		two: number;
		/**
		 * 特殊情况使用,不安全,目前长沙麻将杠用
		 */
		thisId: number;
		GetType(): string { return 'Cmd.EatCardMahjongCmd_C'; }
	}
	export class EatCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.EatCardMahjongCmd_S'; }
	}
	export class EatCardMahjongCmd_Brd {
		obj: EatCardObj;
		GetType(): string { return 'Cmd.EatCardMahjongCmd_Brd'; }
	}
	/**
	 * 碰牌堆结构
	 */
	export class TouchCardObj {
		/**
		 * 碰牌的玩家
		 */
		uid: number;
		/**
		 * 碰牌后的三张thisid
		 */
		thisId: number;
		/**
		 * 碰牌后的三张thisid
		 */
		cardSet: number[];
		/**
		 * 被碰的玩家
		 */
		fromUid: number;
		/**
		 * 虚拟操作,优先级问题
		 */
		fake: number;
		GetType(): string { return 'Cmd.TouchCardObj'; }
	}
	/**
	 * 请求碰牌
	 */
	export class TouchCardMahjongCmd_C {
		thisId: number;
		/**
		 * 云南麻将 杠牌选择金牌数量
		 */
		goldnum: number;
		GetType(): string { return 'Cmd.TouchCardMahjongCmd_C'; }
	}
	export class TouchCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.TouchCardMahjongCmd_S'; }
	}
	/**
	 * 广播碰牌
	 */
	export class TouchCardMahjongCmd_Brd {
		/**
		 * 碰牌的玩家
		 */
		obj: TouchCardObj;
		/**
		 * 类型
		 */
		card_type: number;
		GetType(): string { return 'Cmd.TouchCardMahjongCmd_Brd'; }
	}
	/**
	 * 请求听牌
	 */
	export class ListenCardMahjongCmd_C {
		thisId: number;
		GetType(): string { return 'Cmd.ListenCardMahjongCmd_C'; }
	}
	export class ListenCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		/**
		 * 玩家听牌对象集合
		 */
		listenCard: ListenCardObj[];
		GetType(): string { return 'Cmd.ListenCardMahjongCmd_S'; }
	}
	/**
	 * 广播听牌
	 */
	export class ListenCardMahjongCmd_Brd {
		uid: number;
		thisId: number;
		GetType(): string { return 'Cmd.ListenCardMahjongCmd_Brd'; }
	}
	/**
	 * 广播金坎
	 */
	export class JinkanCardMahjongCmd_Brd {
		uid: number;
		jinkancard: number[];
		GetType(): string { return 'Cmd.JinkanCardMahjongCmd_Brd'; }
	}
	/**
	 * 广播凑拍
	 */
	export class CollectCardMahjongCmd_Brd {
		uid: number;
		GetType(): string { return 'Cmd.CollectCardMahjongCmd_Brd'; }
	}
	/**
	 * 请求亮牌
	 */
	export class ShowCardMahjongCmd_S {
		listenSet: number[];
		listenObjSet: ListenObj[];
		GetType(): string { return 'Cmd.ShowCardMahjongCmd_S'; }
	}
	export class ShowCardMahjongCmd_C {
		/**
		 * 请求亮牌玩家要胡的牌，危险的牌
		 */
		triCard: number[];
		GetType(): string { return 'Cmd.ShowCardMahjongCmd_C'; }
	}
	export class ShowCardMahjongCmd_Brd {
		uid: number;
		handCardSet: number[];
		listenSet: number[];
		/**
		 * 1:扣牌
		 */
		fall: number;
		GetType(): string { return 'Cmd.ShowCardMahjongCmd_Brd'; }
	}
	/**
	 * 请求漂分
	 */
	export class ReqPiaoMahjongCmd_C {
		multiPiao: number;
		GetType(): string { return 'Cmd.ReqPiaoMahjongCmd_C'; }
	}
	export class ReqPiaoMahjongCmd_S {
		/**
		 * 海南麻将返回上局嘎的值
		 */
		multiPiao: number;
		GetType(): string { return 'Cmd.ReqPiaoMahjongCmd_S'; }
	}
	export class ReqPiaoMahjongCmd_Brd {
		/**
		 * 漂0/1/2分  兼容海南麻将0~5
		 */
		multiPiao: number;
		uid: number;
		GetType(): string { return 'Cmd.ReqPiaoMahjongCmd_Brd'; }
	}
	export class StartPiaoMahjongCmd_Brd {
		sec: number;
		/**
		 * 兼容丹东漂分选项
		 */
		multiPiao: number;
		GetType(): string { return 'Cmd.StartPiaoMahjongCmd_Brd'; }
	}
	/**
	 * 结束漂分广播
	 */
	export class EndPiaoMahjongCmd_Brd {
		GetType(): string { return 'Cmd.EndPiaoMahjongCmd_Brd'; }
	}
	/**
	 * 托管
	 */
	export class HostMahjongCmd_C {
		/**
		 * 0,不托管,1,拿啥打啥型,2,能吃吃,能碰碰,检查基础牌型型
		 */
		hostType: number;
		GetType(): string { return 'Cmd.HostMahjongCmd_C'; }
	}
	export class HostMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.HostMahjongCmd_S'; }
	}
	/**
	 * 托管广播
	 */
	export class HostMahjongCmd_Brd {
		uid: number;
		/**
		 * 0,不托管,1,拿啥打啥型,2,能吃吃,能碰碰,检查基础牌型型
		 */
		hostType: number;
		/**
		 * 托管时是否需要显示取消托管 1:不需要
		 */
		showType: number;
		GetType(): string { return 'Cmd.HostMahjongCmd_Brd'; }
	}
	/**
	 * 超时等待广播
	 */
	export class TimeOutWaitMahjongCmd_Brd {
		/**
		 * 超时玩家uid
		 */
		uid: number;
		/**
		 * 超时玩家昵称
		 */
		nickname: string;
		/**
		 * 超时解散倒计时
		 */
		leftsec: number;
		/**
		 * 超时解散倒计时结束后超时的时间
		 */
		sec: number;
		GetType(): string { return 'Cmd.TimeOutWaitMahjongCmd_Brd'; }
	}
	/**
	 * 刷新玩家筹码广播
	 */
	export class RefreshChipsMahjongCmd_Brd {
		chipsSet: ChipsObj[];
		GetType(): string { return 'Cmd.RefreshChipsMahjongCmd_Brd'; }
	}
	export class RefreshPointsMahjongCmd_Brd {
		pointSet: PointsObj[];
		/**
		 * 血流定义刮风或者下雨: 1 刮风, 2 下雨
		 */
		wind_or_rain: number;
		/**
		 * 所胡的牌
		 */
		win_card: number;
		GetType(): string { return 'Cmd.RefreshPointsMahjongCmd_Brd'; }
	}
	/**
	 * 刷新玩家听牌集合
	 */
	export class RefreshListenCardSetMahjongCmd_S {
		resultCode: number;
		desc: string;
		userListenCardSet: UserListenObj[];
		winCardSet: ListenCardObj[];
		GetType(): string { return 'Cmd.RefreshListenCardSetMahjongCmd_S'; }
	}
	/**
	 * 请求踢人
	 */
	export class KickMahjongCmd_C {
		/**
		 * 踢人玩家
		 */
		uid: number;
		/**
		 * 被踢玩家
		 */
		kickUid: number;
		GetType(): string { return 'Cmd.KickMahjongCmd_C'; }
	}
	export class KickMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.KickMahjongCmd_S'; }
	}
	/**
	 * 踢人广播
	 */
	export class KickMahjongCmd_Brd {
		/**
		 * 被踢玩家
		 */
		uid: number;
		desc: string;
		GetType(): string { return 'Cmd.KickMahjongCmd_Brd'; }
	}
	/**
	 * 送礼
	 */
	export class SendGiftMahjongCmd_C {
		/**
		 * 礼物内容
		 */
		gift: Cmd.GiftsInfo;
		GetType(): string { return 'Cmd.SendGiftMahjongCmd_C'; }
	}
	export class SendGiftMahjongCmd_S {
		/**
		 * 返回码
		 */
		resultCode: number;
		/**
		 * 信息
		 */
		desc: string;
		GetType(): string { return 'Cmd.SendGiftMahjongCmd_S'; }
	}
	export class SendGiftMahjongCmd_Brd {
		/**
		 * 送礼玩家
		 */
		gift: Cmd.GiftsInfo;
		/**
		 * 玩家剩余钻石
		 */
		diamond: number[];
		GetType(): string { return 'Cmd.SendGiftMahjongCmd_Brd'; }
	}
	export class UserRecord {
		uid: number;
		headurl: string;
		nickname: string;
		/**
		 * 胡牌次数
		 */
		win: number;
		/**
		 * 中马次数
		 */
		horse: number;
		/**
		 * 花单吊次数
		 */
		singleFlowerHang: number;
		/**
		 * 花单花次数
		 */
		doubleFlowerHang: number;
		/**
		 * 总成绩
		 */
		totalScore: number;
		/**
		 * 是否房主 1:是 0:不是
		 */
		isOwner: boolean;
		/**
		 * 是否大赢家 1:是 0:不是
		 */
		isWinner: number;
		/**
		 * 玩家总缺分
		 */
		lack: number;
		/**
		 * 房主小费
		 */
		tip: number;
		/**
		 * 开杠次数,鸡平胡
		 */
		bar: number;
		/**
		 * 放炮次数,鸡平胡
		 */
		fangpao: number;
		/**
		 * 最大番数,鸡平胡
		 */
		maxMulti: number;
		/**
		 * 自摸次数
		 */
		selfWin: number;
		/**
		 * 长沙麻将
		 *  开杠次数
		 */
		barNum: number;
		/**
		 * 中鸟次数
		 */
		birdNum: number;
		/**
		 * 放炮次数
		 */
		shootNum: number;
		/**
		 * 卡五星
		 */
		showCardNum: number;
		fangpaoNum: number;
		/**
		 * 宁德麻将
		 *  平胡次数
		 */
		normalWinNum: number;
		/**
		 * 自摸次数
		 */
		zimoWinNum: number;
		/**
		 * 特殊胡牌次数
		 */
		SpecialWinNum: number;
		/**
		 * 起手小胡次数
		 */
		startWinNum: number;
		/**
		 * 胡牌次数,WHJ兼容用,估计会干掉
		 */
		winNum: number;
		/**
		 * 单游次数,WHJ兼容用,估计会干掉
		 */
		singleNum: number;
		/**
		 * 双游次数,WHJ兼容用,估计会干掉
		 */
		doubleNum: number;
		/**
		 * 三游次数,WHJ兼容用,估计会干掉
		 */
		threeNum: number;
		/**
		 * 开杠次数,WHJ兼容用,估计会干掉
		 */
		BarNum: number;
		/**
		 * 宁德麻将
		 * 每个玩家每局输赢分数
		 */
		perSorce: number[];
		/**
		 * 四川
		 *  接炮次数
		 */
		jiepao: number;
		/**
		 * 点炮次数
		 */
		dianpao: number;
		/**
		 * 暗杠次数
		 */
		bar_self: number;
		/**
		 * 明杠次数
		 */
		bar_other: number;
		/**
		 * 查大叫次数
		 */
		chadajiao: number;
		/**
		 * 红包
		 */
		redpack: number;
		/**
		 * 承包分
		 */
		chengbaofen: number;
		/**
		 * 未听牌
		 */
		nolisten: number;
		/**
		 * 基本分
		 */
		basicpoint: number;
		/**
		 * 特殊分
		 */
		specialpoint: number;
		/**
		 * 每角明细
		 */
		jiaoSet: JiaoObj[];
		/**
		 * 恩施
		 * 痞杠
		 */
		pi_bar: number;
		/**
		 * 癞杠
		 */
		gold_bar: number;
		/**
		 * 扎杠胡次数
		 */
		zhaWinNum: number;
		/**
		 * 抢杠胡次数
		 */
		grabBarWinNum: number;
		/**
		 * 瑞金
		 *  飞的次数
		 */
		feiNum: number;
		/**
		 * 四宝次数
		 */
		baoNum: number;
		/**
		 * 红花
		 *  红花
		 */
		flowers: number;
		/**
		 * 1:赏花 2:赏群主
		 */
		flowersBtn: number;
		GetType(): string { return 'Cmd.UserRecord'; }
	}
	export class JiaoObj {
		basicpoint: number;
		specialpoint: number;
		/**
		 * 每角枯桶
		 */
		kutong: number;
		GetType(): string { return 'Cmd.JiaoObj'; }
	}
	/**
	 * 总成绩
	 */
	export class FinalScoreMahjongCmd_C {
		/**
		 * 房间id
		 */
		roomId: number;
		GetType(): string { return 'Cmd.FinalScoreMahjongCmd_C'; }
	}
	export class FinalScoreMahjongCmd_S {
		/**
		 * 返回码
		 */
		resultCode: number;
		/**
		 * 信息
		 */
		desc: string;
		GetType(): string { return 'Cmd.FinalScoreMahjongCmd_S'; }
	}
	export class FinalScoreMahjongCmd_Brd {
		/**
		 * 房间id
		 */
		roomId: number;
		/**
		 * 总成绩数据
		 */
		recordInfo: UserRecord[];
		/**
		 * 1:解散房间	2:正常结束  3:本角结算
		 */
		state: number;
		/**
		 * 解散原因
		 */
		reason: string;
		/**
		 * 如果是匹配号房间,显示出匹配号
		 */
		matchId: number;
		/**
		 * 闯关排名
		 */
		rank: number;
		/**
		 * 闯关奖励
		 */
		prize: Cmd.RewardItem[];
		/**
		 * 失败复活消耗
		 */
		cost: Cmd.RewardItem;
		/**
		 * 金蛋
		 */
		goldEgg: number;
		/**
		 * 领取奖励类型1:看视频领取 2:分享领取 3:直接领取
		 */
		type: number;
		GetType(): string { return 'Cmd.FinalScoreMahjongCmd_Brd'; }
	}
	/**
	 * 开局操作集
	 */
	export class StartNewRoundOpCmd_S {
		opType: number[];
		/**
		 * 庄家开局可杠
		 */
		barSet: number[];
		GetType(): string { return 'Cmd.StartNewRoundOpCmd_S'; }
	}
	/**
	 * 起手小胡等待时间
	 */
	export class StartNewRoundOpTimeCmd_Brd {
		sec: number;
		GetType(): string { return 'Cmd.StartNewRoundOpTimeCmd_Brd'; }
	}
	/**
	 * 开局请求操作
	 */
	export class StartNewRoundOpCmd_C {
		/**
		 * MahjongOpCardType
		 */
		opType: number;
		/**
		 * 中途四喜需要把id发上来
		 */
		thisId: number;
		GetType(): string { return 'Cmd.StartNewRoundOpCmd_C'; }
	}
	/**
	 * 开局操作广播
	 */
	export class StartNewRoundOpCmd_Brd {
		uid: number;
		cardSet: number[];
		winType: number[];
		GetType(): string { return 'Cmd.StartNewRoundOpCmd_Brd'; }
	}
	export class StartNewRoundOp_Brd {
		GetType(): string { return 'Cmd.StartNewRoundOp_Brd'; }
	}
	/**
	 * 请求补张
	 */
	export class SupplyCardMahjongCmd_C {
		thisId: number;
		GetType(): string { return 'Cmd.SupplyCardMahjongCmd_C'; }
	}
	export class SupplyCardMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.SupplyCardMahjongCmd_S'; }
	}
	/**
	 * 广播补张
	 */
	export class SupplyCardMahjongCmd_Brd {
		/**
		 * 碰牌的玩家
		 */
		obj: BarCardObj;
		/**
		 * 只在碰杠时 是否可抢杠胡 分别发送 1:可胡 0:不可胡
		 */
		canWin: number;
		GetType(): string { return 'Cmd.SupplyCardMahjongCmd_Brd'; }
	}
	/**
	 * 获取牌堆剩余牌数
	 */
	export class GetHeapCard_C {
		GetType(): string { return 'Cmd.GetHeapCard_C'; }
	}
	export class GetHeapCard_S {
		/**
		 * 返回码
		 */
		resultCode: number;
		/**
		 * 信息
		 */
		desc: string;
		/**
		 * 万
		 */
		wanCardSet: number[];
		/**
		 * 条
		 */
		tiaoCardSet: number[];
		/**
		 * 筒
		 */
		tongCardSet: number[];
		/**
		 * 字
		 */
		ziCardSet: number[];
		/**
		 * 花
		 */
		flowerCardSet: number[];
		GetType(): string { return 'Cmd.GetHeapCard_S'; }
	}
	/**
	 * ping值广播
	 */
	export class SetPingTimeNullUserPmd_Brd {
		pingmsec: number;
		accid: number;
		GetType(): string { return 'Cmd.SetPingTimeNullUserPmd_Brd'; }
	}
	export class SetSameIpWarn_S {
		sameSet: string[];
		GetType(): string { return 'Cmd.SetSameIpWarn_S'; }
	}
	export class SysMessageMahjongCmd_S {
		desc: string;
		/**
		 * 消息级别和位置相关
		 */
		pos: number;
		GetType(): string { return 'Cmd.SysMessageMahjongCmd_S'; }
	}
	export class ChangePointMahjongCmd_Brd {
		uid: number;
		/**
		 * 剩余量
		 */
		points: number;
		remainder: number;
		/**
		 * 原因,0表示单局结算,1表示跟牌结算,2表示杠后结算
		 */
		reason: number;
		GetType(): string { return 'Cmd.ChangePointMahjongCmd_Brd'; }
	}
	/**
	 * 换桌,同一房间换,名字没起好
	 */
	export class ChangeRoomMahjongCmd_C {
		roomId: number;
		GetType(): string { return 'Cmd.ChangeRoomMahjongCmd_C'; }
	}
	export class ChangeRoomMahjongCmd_S {
		resultCode: number;
		desc: string;
		GetType(): string { return 'Cmd.ChangeRoomMahjongCmd_S'; }
	}
	/**
	 * 宽甸麻将 二人麻将 大邑麻将
	 */
	export class PlayButtonMahjongCmd_S {
		resultCode: number;
		/**
		 * 牌的列表
		 */
		CardSet: number[];
		/**
		 * 类型 1是报胡 2是请胡
		 */
		playButton: number;
		/**
		 * 抻吊后牌的列表
		 */
		chendiaomap: number[];
		GetType(): string { return 'Cmd.PlayButtonMahjongCmd_S'; }
	}
	export class PlayButtonMahjongCmd_C {
		/**
		 * 0表示没点任何按钮 1 报夹 2报吊 3 站立报听 4站立报夹 5站立报吊 6听 888取消 7抻吊 8站立抻吊 9报边夹 10站立报边夹
		 */
		playButton: number;
		GetType(): string { return 'Cmd.PlayButtonMahjongCmd_C'; }
	}
	export class PlayButtonMahjongCmd_Brd {
		uid: number;
		/**
		 * 0表示没点任何按钮 1 报夹 2报吊 3 站立报听 4站立报夹 5站立报吊 6听 7抻吊 8站立抻吊 9报边夹 10站立报边夹
		 */
		playButton: number;
		/**
		 * 是否断线重连后发的广播 1是
		 */
		isReconnet: number;
		/**
		 * 投河的类型 1投河，2不投河，空值不管
		 */
		touheType: number;
		GetType(): string { return 'Cmd.PlayButtonMahjongCmd_Brd'; }
	}
	/**
	 * 请求加倍
	 */
	export class DoubleMahjongCmd_C {
		GetType(): string { return 'Cmd.DoubleMahjongCmd_C'; }
	}
	export class DoubleMahjongCmd_S {
		resultCode: number;
		/**
		 * 加倍数
		 */
		multiple: number;
		GetType(): string { return 'Cmd.DoubleMahjongCmd_S'; }
	}
	export class DoubleMahjongCmd_Brd {
		uid: number;
		/**
		 * 是否需要蒙牌 0是不需要，1为需要
		 */
		isMask: number;
		GetType(): string { return 'Cmd.DoubleMahjongCmd_Brd'; }
	}
	export class CheckMoneyMahjongCmd_S {
		/**
		 * 1:输赢达到上限 2:金币不足
		 */
		code: number;
		GetType(): string { return 'Cmd.CheckMoneyMahjongCmd_S'; }
	}
	/**
	 * 金币场游戏中充值广播
	 */
	export class ChargeGoldCoinMahjongCmd_Brd {
		/**
		 * 所有需要充值的玩家id
		 */
		uid: number[];
		/**
		 * 充值操作时间
		 */
		sec: number;
		GetType(): string { return 'Cmd.ChargeGoldCoinMahjongCmd_Brd'; }
	}
	/**
	 * 取消充值金币操作
	 */
	export class CancelChargeGoldCoinMahjongCmd_C {
		GetType(): string { return 'Cmd.CancelChargeGoldCoinMahjongCmd_C'; }
	}
	/**
	 * 对局流水信息
	 */
	export class GameWaterMahjongCmd_S {
		/**
		 * 番型输赢明细
		 */
		multiDetailSet: MultiDetail[];
		GetType(): string { return 'Cmd.GameWaterMahjongCmd_S'; }
	}
	/**
	 * 血战血流 认输广播
	 */
	export class GameLoserUidMahjongCmd_Brd {
		loseruidSet: number[];
		/**
		 * 充值成功为0 失败为1
		 */
		ChargeState: number;
		GetType(): string { return 'Cmd.GameLoserUidMahjongCmd_Brd'; }
	}
	export class PointDetail {
		/**
		 * 玩家uid
		 */
		uid: number;
		/**
		 * 牌
		 */
		CardThisId: number[];
		/**
		 * 对应的分数
		 */
		point: number;
		/**
		 * 类型 0-无精 1-冲关 2-霸王
		 */
		pointType: number[];
		GetType(): string { return 'Cmd.PointDetail'; }
	}
	export class XiaGoldDetail {
		/**
		 * 下精明细
		 */
		pointDetail: PointDetail[];
		/**
		 * 算分的牌
		 */
		ShowCard: number[];
		/**
		 * 玩法类型 0-埋雷 1-上下翻精 2-照镜子 3-回头一笑 4-同一首歌
		 */
		Type: number;
		GetType(): string { return 'Cmd.XiaGoldDetail'; }
	}
	/**
	 * 南昌麻将 下精算分广播
	 */
	export class XiaGoldCardPointMahjongCmd_Brd {
		/**
		 * 所有玩家下精分明细
		 */
		xiaGoldDetail: XiaGoldDetail[];
		/**
		 * 玩法类型 0-埋雷 1-上下翻精 2-照镜子 3-回头一笑 4-同一首歌
		 */
		Type: number;
		GetType(): string { return 'Cmd.XiaGoldCardPointMahjongCmd_Brd'; }
	}
	/**
	 * 开始抓花广播
	 */
	export class StartSelectCardMahjong_Brd {
		/**
		 * 所有抓花的牌
		 */
		afcs: number[];
		/**
		 * 抓花的玩家
		 */
		uid: number;
		/**
		 * 抓花时间
		 */
		sec: number;
		/**
		 * 可以抓多少张
		 */
		limit: number;
		/**
		 * 胡牌信息
		 */
		rewardSet: RewardObj[];
		GetType(): string { return 'Cmd.StartSelectCardMahjong_Brd'; }
	}
	/**
	 * 请求抓花
	 */
	export class SelectCardMahjong_C {
		/**
		 * 选择的牌的thisid
		 */
		thisid: number;
		GetType(): string { return 'Cmd.SelectCardMahjong_C'; }
	}
	/**
	 * 抓花广播
	 */
	export class SelectCardMahjong_Brd {
		/**
		 * 选择的牌的thisid
		 */
		thisid: number;
		/**
		 * 抓花输赢: 0,输; 1,赢
		 */
		win: number;
		GetType(): string { return 'Cmd.SelectCardMahjong_Brd'; }
	}
	/**
	 * 万州麻将的换牌数据
	 */
	export class ChangeCardDataMahjong_S {
		/**
		 * 换给的玩家uid
		 */
		giveuid: number;
		/**
		 * 牌
		 */
		giveCardThisId: number[];
		/**
		 * 换到的牌的玩家uid
		 */
		getuid: number;
		/**
		 * 牌
		 */
		getCardThisId: number[];
		/**
		 * 谁的牌,放录像用
		 */
		ownerid: number;
		GetType(): string { return 'Cmd.ChangeCardDataMahjong_S'; }
	}
	/**
	 * 万州麻将的买牌广播
	 */
	export class BuyCardMahjong_Brd {
		/**
		 * 玩家uid
		 */
		uid: number;
		/**
		 * 0是没点买牌,1是点了买牌
		 */
		buy: number;
		GetType(): string { return 'Cmd.BuyCardMahjong_Brd'; }
	}
	/**
	 * 万州麻将的已胡玩家数据广播
	 */
	export class WinSeatCardDataMahjong_Brd {
		/**
		 * 玩家uid
		 */
		uid: number;
		/**
		 * 赢的牌的id
		 */
		wincardId: number;
		GetType(): string { return 'Cmd.WinSeatCardDataMahjong_Brd'; }
	}
	/**
	 * 扣牌消息
	 */
	export class KouCardMahjongCmd_CS {
		/**
		 * 需要进行扣牌处理的牌列表
		 */
		cardList: number[];
		/**
		 * 是否需要进行扣牌 true 需要 false 不需要
		 */
		needKou: boolean;
		/**
		 * 是否要进行扣牌
		 */
		yesOrNo: boolean;
		GetType(): string { return 'Cmd.KouCardMahjongCmd_CS'; }
	}
	/**
	 * 扣牌
	 */
	export class WaitKouSeatMahjongCmd_S {
		/**
		 * 等待扣牌玩家列表
		 */
		waitUid: number[];
		GetType(): string { return 'Cmd.WaitKouSeatMahjongCmd_S'; }
	}
	export class OtherKouCardMahjongCmd_Brd {
		/**
		 * 所有人的扣牌信息
		 */
		KouCards: KouCardInfo[];
		GetType(): string { return 'Cmd.OtherKouCardMahjongCmd_Brd'; }
	}
	export class KouCardInfo {
		/**
		 * 当前玩家的uid
		 */
		uid: number;
		/**
		 * 信息类型 （0-不扣牌 1-扣牌通知） 2-显示更新
		 */
		infoType: number;
		/**
		 * 扣牌数量
		 */
		kouCount: number;
		GetType(): string { return 'Cmd.KouCardInfo'; }
	}
	/**
	 * 通知玩家选择翻金方式
	 */
	export class StartChoiseTurnGoldType_Brd {
		sec: number;
		/**
		 * 断线重连是添加骰子数据
		 */
		dice: DiceObj;
		GetType(): string { return 'Cmd.StartChoiseTurnGoldType_Brd'; }
	}
	/**
	 * 选择翻金方式
	 */
	export class ChoiseTurnGoldType_C {
		/**
		 * 1:向上    2:向下    3:开裂    4:染色
		 */
		turnType: number;
		/**
		 * 裂开数量
		 */
		num: number;
		/**
		 * 1:正向   2:反向
		 */
		direction: number;
		GetType(): string { return 'Cmd.ChoiseTurnGoldType_C'; }
	}
	/**
	 * 广播翻金方式
	 */
	export class ChoiseTurnGoldType_Brd {
		turnType: number;
		/**
		 * 裂开数量
		 */
		num: number;
		/**
		 * 1:正向   2:反向
		 */
		direction: number;
		GetType(): string { return 'Cmd.ChoiseTurnGoldType_Brd'; }
	}
	/**
	 * 过蛋
	 */
	export class ShowBarCardPassTheEgg_CS {
		/**
		 * 过蛋玩家id
		 */
		uid: number;
		/**
		 * 过蛋牌thisid
		 */
		thisId: number;
		eggScore: number;
		GetType(): string { return 'Cmd.ShowBarCardPassTheEgg_CS'; }
	}
	export class RoundScore {
		/**
		 * 玩家id
		 */
		uid: number;
		/**
		 * 对局中的分数
		 */
		score: number[];
		GetType(): string { return 'Cmd.RoundScore'; }
	}
	/**
	 * 请求战绩流水
	 */
	export class ShowRoundScore_C {
		GetType(): string { return 'Cmd.ShowRoundScore_C'; }
	}
	/**
	 * 返回战绩流水
	 */
	export class ShowRoundScore_S {
		/**
		 * 对局信息 重连才会推送
		 */
		rs: RoundScore[];
		GetType(): string { return 'Cmd.ShowRoundScore_S'; }
	}
	export class ServiceChargeMahjongCmd_Brd {
		/**
		 * 类型 1 金币 2钻石
		 */
		ret: number;
		/**
		 * 费用
		 */
		score: number[];
		GetType(): string { return 'Cmd.ServiceChargeMahjongCmd_Brd'; }
	}
	export class SelfActiveMahjong_C {
		/**
		 * 玩家id 非必要
		 */
		uid: number;
		GetType(): string { return 'Cmd.SelfActiveMahjong_C'; }
	}
	/**
	 * 玩家牌型报警
	 */
	export class CardTypeWarnMahjong_Brd {
		/**
		 * 报警玩家的uid
		 */
		uid: number;
		GetType(): string { return 'Cmd.CardTypeWarnMahjong_Brd'; }
	}
	export class NestleCardMahjongCmd_Brd {
		/**
		 * 偎牌的玩家
		 */
		uid: number;
		thisId: number;
		/**
		 * 偎牌后的三张thisid
		 */
		cardSet: number[];
		/**
		 * 偎牌的类型
		 */
		nestleType: number;
		GetType(): string { return 'Cmd.NestleCardMahjongCmd_Brd'; }
	}
	/**
	 * 胡息分数刷新通知
	 */
	export class UpdateHuXiCmd_Brd {
		/**
		 * 刷新的玩家
		 */
		uid: number;
		/**
		 * 玩家的胡息
		 */
		point: number;
		GetType(): string { return 'Cmd.UpdateHuXiCmd_Brd'; }
	}
	/**
	 * 应答螺丝胡胡2收走
	 */
	export class WinGoMahjongCmd_C {
		/**
		 * 不填或者0表示继续,1表示走
		 */
		op: number;
		GetType(): string { return 'Cmd.WinGoMahjongCmd_C'; }
	}
	/**
	 * 应答螺丝胡胡2收走
	 */
	export class WinGoMahjongCmd_Brd {
		/**
		 * 选择了操作的玩家,如果是uid是自己,则需要做出选择
		 */
		uid: number;
		/**
		 * 不填或者0表示继续,1表示走
		 */
		op: number;
		/**
		 * 剩余操作时间,不填表示已经操作过,填了就没用了
		 */
		sec: number;
		GetType(): string { return 'Cmd.WinGoMahjongCmd_Brd'; }
	}
	/**
	 * 字牌等胡请求
	 */
	export class WaitWinZiCardCmd_CS {
		/**
		 * 返回码
		 */
		resultCode: number;
		GetType(): string { return 'Cmd.WaitWinZiCardCmd_CS'; }
	}
	/**
	 * 字牌抢胡请求
	 */
	export class GrabWinZiCardCmd_C {
		/**
		 * 抢胡的牌
		 */
		thisId: number;
		/**
		 * 主动抢胡 1表示主动抢
		 */
		actionGrab: number;
		GetType(): string { return 'Cmd.GrabWinZiCardCmd_C'; }
	}
	/**
	 * 诏安麻将请求插台
	 */
	export class ReqInsertTableMahjongCmd_C {
		/**
		 * 插台数量 0表示不插
		 */
		point: number;
		GetType(): string { return 'Cmd.ReqInsertTableMahjongCmd_C'; }
	}
	export class ReqInsertTableMahjongCmd_S {
		point: number;
		GetType(): string { return 'Cmd.ReqInsertTableMahjongCmd_S'; }
	}
	export class ReqInsertTableMahjongCmd_Brd {
		point: number;
		uid: number;
		GetType(): string { return 'Cmd.ReqInsertTableMahjongCmd_Brd'; }
	}
	/**
	 * 开始插台广播
	 */
	export class StartInsertTableMahjongCmd_Brd {
		sec: number;
		GetType(): string { return 'Cmd.StartInsertTableMahjongCmd_Brd'; }
	}
}
