//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// Generated from: poker_room.proto
/// <reference path="common.ts" />

module Cmd {
	export enum PokerConst {
		/**
		 * 系统用户id
		 */
		SysUserId = 10000
	}
	/**
	 * 出牌的类型
	 */
	export enum CardSetType {
		/**
		 * 无牌型
		 */
		CardSetType_None = 0,
		/**
		 * 单张
		 */
		CardSetType_Single = 100,
		/**
		 * 对子
		 */
		CardSetType_Double = 200,
		/**
		 * 顺子
		 */
		CardSetType_StraightSingle = 300,
		/**
		 * 连对
		 */
		CardSetType_StraightDouble = 400,
		/**
		 * 含三张的牌，如 三代一
		 */
		CardSetType_ThreeWithX = 500,
		/**
		 * 三代一
		 */
		CardSetType_ThreeWithOne = 501,
		/**
		 * 含四张的牌，如 四代二
		 */
		CardSetType_FourWithX = 600,
		/**
		 * 炸弹
		 */
		CardSetType_Bomb = 700,
		/**
		 * 没牛
		 */
		CardSetType_BeefNone = 1000,
		/**
		 * 牛1
		 */
		CardSetType_BeefOne = 1001,
		/**
		 * 牛2
		 */
		CardSetType_BeefTwo = 1002,
		/**
		 * 牛3
		 */
		CardSetType_BeefThree = 1003,
		/**
		 * 牛4
		 */
		CardSetType_BeefFour = 1004,
		/**
		 * 牛5
		 */
		CardSetType_BeefFive = 1005,
		/**
		 * 牛6
		 */
		CardSetType_BeefSix = 1006,
		/**
		 * 牛7
		 */
		CardSetType_BeefSeven = 1007,
		/**
		 * 牛8
		 */
		CardSetType_BeefEight = 1008,
		/**
		 * 牛9
		 */
		CardSetType_BeefNine = 1009,
		/**
		 * 牛牛
		 */
		CardSetType_BeefBull = 1010,
		/**
		 * 四花牛
		 */
		CardSetType_BeefFourFlower = 1011,
		/**
		 * 五花牛
		 */
		CardSetType_BeefFiveFlower = 1012,
		/**
		 * 炸弹
		 */
		CardSetType_BeefBomb = 1013,
		/**
		 * 五小牛
		 */
		CardSetType_BeefSmall = 1014,
		/**
		 * 顺子
		 */
		CardSetType_BeefStraight = 1015,
		/**
		 * 同花
		 */
		CardSetType_BeefFlush = 1016,
		/**
		 * 葫芦
		 */
		CardSetType_BeefFullHouse = 1017,
		/**
		 * 炸弹
		 */
		CardSetType_BeefBomb1 = 1018,
		/**
		 * 同花顺
		 */
		CardSetType_BeefStraightFlush = 1019,
		/**
		 * 四连通杀
		 */
		CardSetType_Quadrakill = 1020,
		/**
		 * 龙虎炮
		 */
		CardSetType_DragonTiger = 1021,
		/**
		 * 单牌(高牌)
		 */
		CardSetType_TexasHighCard = 1101,
		/**
		 * 一对
		 */
		CardSetType_TexasOnePair = 1102,
		/**
		 * 两对
		 */
		CardSetType_TexasTwoPairs = 1103,
		/**
		 * 三条
		 */
		CardSetType_TexasThreeOfKind = 1104,
		/**
		 * 顺子
		 */
		CardSetType_TexasStraight = 1105,
		/**
		 * 同花
		 */
		CardSetType_TexasFlush = 1106,
		/**
		 * 三条加一对(葫芦)
		 */
		CardSetType_TexasFullHouse = 1107,
		/**
		 * 四条(金刚)
		 */
		CardSetType_TexasFourOfKind = 1108,
		/**
		 * 同花顺
		 */
		CardSetType_TexasStraightFlush = 1109,
		/**
		 * 皇家同花顺
		 */
		CardSetType_TexasRoyalFlush = 1110,
		/**
		 * 至尊
		 */
		CardSetType_PaiGowExtreme = 1301,
		/**
		 * 双天
		 */
		CardSetType_PaiGowTwoDays = 1302,
		/**
		 * 双地
		 */
		CardSetType_PaiGowTwoGround = 1303,
		/**
		 * 双人
		 */
		CardSetType_PaiGowTwoPeople = 1304,
		/**
		 * 双鹅
		 */
		CardSetType_PaiGowTwoE = 1305,
		/**
		 * 双梅
		 */
		CardSetType_PaiGowTwoPlum = 1306,
		/**
		 * 双长
		 */
		CardSetType_PaiGowTwoLong = 1307,
		/**
		 * 双板凳
		 */
		CardSetType_PaiGowTwoBench = 1308,
		/**
		 * 双斧头
		 */
		CardSetType_PaiGowTwoAxe = 1309,
		/**
		 * 双红头
		 */
		CardSetType_PaiGowTwoHead = 1310,
		/**
		 * 双铜锤
		 */
		CardSetType_PaiGowTwoPratia = 1311,
		/**
		 * 双零霖
		 */
		CardSetType_PaiGowTwoLing = 1312,
		/**
		 * 对杂九
		 */
		CardSetType_PaiGowTwoMixNine = 1313,
		/**
		 * 对杂八
		 */
		CardSetType_PaiGowTwoMixEight = 1314,
		/**
		 * 对杂七
		 */
		CardSetType_PaiGowTwoMixSeven = 1315,
		/**
		 * 对杂五
		 */
		CardSetType_PaiGowTwoMixFive = 1316,
		/**
		 * 天王
		 */
		CardSetType_PaiGowDayKing = 1317,
		/**
		 * 地王
		 */
		CardSetType_PaiGowGroundKing = 1318,
		/**
		 * 天杠
		 */
		CardSetType_PaiGowDayBar = 1319,
		/**
		 * 地杠
		 */
		CardSetType_PaiGowGroundBar = 1331,
		/**
		 * 天高九
		 */
		CardSetType_PaiGowDayHighNine = 1332,
		/**
		 * 地高九
		 */
		CardSetType_PaiGowGroundHighNine = 1333,
		/**
		 * 天九  杂九
		 */
		CardSetType_PaiGowGodNine = 1334,
		CardSetType_PaiGowGroundNine = 1335,
		CardSetType_PaiGowPeoPleNine = 1336,
		CardSetType_PaiGowENine = 1337,
		CardSetType_PaiGowLongNine = 1338,
		CardSetType_PaiGowShortNine = 1339,
		/**
		 * 天八 杂八
		 */
		CardSetType_PaiGowGodEight = 1341,
		CardSetType_PaiGowGroundEight = 1342,
		CardSetType_PaiGowPeoPleEight = 1343,
		CardSetType_PaiGowEEight = 1344,
		CardSetType_PaiGowLongEight = 1345,
		CardSetType_PaiGowShortEight = 1346,
		CardSetType_PaiGowMixEight = 1347,
		/**
		 * 天七  杂七
		 */
		CardSetType_PaiGowGodSeven = 1348,
		CardSetType_PaiGowGroundSeven = 1349,
		CardSetType_PaiGowPeoPleSeven = 1350,
		CardSetType_PaiGowESeven = 1351,
		CardSetType_PaiGowLongSeven = 1352,
		CardSetType_PaiGowShortSeven = 1353,
		CardSetType_PaiGowMixSeven = 1354,
		/**
		 * 天六 杂六
		 */
		CardSetType_PaiGowGodSix = 1355,
		CardSetType_PaiGowGroundSix = 1356,
		CardSetType_PaiGowPeoPleSix = 1357,
		CardSetType_PaiGowESix = 1358,
		CardSetType_PaiGowLongSix = 1359,
		CardSetType_PaiGowShortSix = 1360,
		CardSetType_PaiGowMixSix = 1361,
		/**
		 * 天五  杂五
		 */
		CardSetType_PaiGowGodFive = 1362,
		CardSetType_PaiGowGroundFive = 1363,
		CardSetType_PaiGowPeoPleFive = 1364,
		CardSetType_PaiGowEFive = 1365,
		CardSetType_PaiGowLongFive = 1366,
		CardSetType_PaiGowShortFive = 1367,
		CardSetType_PaiGowMixFive = 1368,
		/**
		 * 天四 杂四
		 */
		CardSetType_PaiGowGodFour = 1369,
		CardSetType_PaiGowGroundFour = 1370,
		CardSetType_PaiGowPeoPleFour = 1371,
		CardSetType_PaiGowEFour = 1372,
		CardSetType_PaiGowLongFour = 1373,
		CardSetType_PaiGowShortFour = 1374,
		CardSetType_PaiGowMixFour = 1375,
		/**
		 * 天三 杂三
		 */
		CardSetType_PaiGowGodThree = 1376,
		CardSetType_PaiGowGroundThree = 1377,
		CardSetType_PaiGowPeoPleThree = 1378,
		CardSetType_PaiGowEThree = 1379,
		CardSetType_PaiGowLongThree = 1380,
		CardSetType_PaiGowShortThree = 1381,
		CardSetType_PaiGowMixThree = 1382,
		/**
		 * 天二 杂二
		 */
		CardSetType_PaiGowGodTwo = 1383,
		CardSetType_PaiGowGroundTwo = 1384,
		CardSetType_PaiGowPeoPleTwo = 1385,
		CardSetType_PaiGowETwo = 1386,
		CardSetType_PaiGowLongTwo = 1387,
		CardSetType_PaiGowShortTwo = 1388,
		CardSetType_PaiGowMixTwo = 1389,
		/**
		 * 人一 杂一
		 */
		CardSetType_PaiGowPeoPleOne = 1390,
		CardSetType_PaiGowEOne = 1391,
		CardSetType_PaiGowLongOne = 1392,
		CardSetType_PaiGowShortOne = 1393,
		CardSetType_PaiGowMixOne = 1394,
		/**
		 * 毕十
		 */
		CardSetType_PaiGowBiTen = 1395,
		/**
		 * 鬼子
		 */
		CardSetType_PaiGowDevil = 1396,
		/**
		 * 天一
		 */
		CardSetType_PaiGowGodOne = 1397,
		/**
		 * 地一
		 */
		CardSetType_PaiGowGroundOne = 1398
	}
	/**
	 * 游戏状态
	 */
	export enum GameState {
		/**
		 * 准备
		 */
		State_Ready = 1,
		/**
		 * 托管
		 */
		State_Host = 2,
		/**
		 * 在游戏中
		 */
		State_InGame = 3,
		/**
		 * 坐下
		 */
		State_Sit = 4,
		/**
		 * 完成
		 */
		State_Complete = 5,
		/**
		 * 游戏启动
		 */
		State_RoundEnable = 6,
		/**
		 * 弃牌
		 */
		State_Fold = 7,
		/**
		 * 看牌
		 */
		State_Check = 8,
		/**
		 * 比牌赢
		 */
		State_CompareWin = 9,
		/**
		 * 比牌输
		 */
		State_CompareLose = 10,
		/**
		 * 可看手牌
		 */
		State_SeeCard = 11,
		/**
		 * 已亮牌
		 */
		State_ShowCard = 12,
		/**
		 * 抗贡
		 */
		State_AntiTribute = 13,
		/**
		 * 接风
		 */
		State_Relay = 14,
		/**
		 * 反贡
		 */
		State_ReversalTribute = 15,
		/**
		 * 更换阵营
		 */
		GameStatus_ChangeTeam = 16
	}
	/**
	 * 游戏目前所处的状态
	 */
	export enum GameStatus {
		/**
		 * 空闲时间
		 */
		GameStatus_Free = 1,
		/**
		 * 压注时间
		 */
		GameStatus_Bet = 2,
		/**
		 * 开奖时间
		 */
		GameStatus_Lottery = 3,
		/**
		 * 结算时间
		 */
		GameStatus_Settle = 4,
		/**
		 * 抢／叫地主
		 */
		GameStatus_LordOption = 5,
		/**
		 * 踢
		 */
		GameStatus_Kick = 6,
		/**
		 * 出牌
		 */
		GameStatus_Playing = 7,
		/**
		 * 暂停
		 */
		GameStatus_Pause = 8,
		/**
		 * 倒计时
		 */
		GameStatus_CountDown = 9,
		/**
		 * 等待下一局
		 */
		GameStatus_WaitNextRound = 10,
		/**
		 * 进贡阶段
		 */
		GameStatus_PayTribute = 11,
		/**
		 * 发牌
		 */
		GameStatus_Deal = 12,
		/**
		 * 即将结束
		 */
		GameStatus_WillFinal = 13,
		/**
		 * 房间增加时长
		 */
		GameStatus_RoomDelay = 14,
		/**
		 * 重置阶段
		 */
		GameStatus_Reset = 15
	}
	/**
	 * 操作
	 */
	export enum Operation {
		/**
		 * 叫地主 - 不叫
		 */
		LordCall0 = 1,
		/**
		 * 叫地主 - 叫1分
		 */
		LordCall1 = 2,
		/**
		 * 叫地主 - 叫2分
		 */
		LordCall2 = 3,
		/**
		 * 叫地主 - 叫3分
		 */
		LordCall3 = 4,
		/**
		 * 抢地主 - 不抢
		 */
		LordRobNo = 5,
		/**
		 * 抢地主 - 抢
		 */
		LordRobYes = 6,
		/**
		 * 叫地主 - 不叫
		 */
		LordCallNo = 7,
		/**
		 * 叫地主 - 叫
		 */
		LordCallYes = 8,
		/**
		 * 要的起、拿牌
		 */
		Play = 9,
		/**
		 * 要不去、不拿牌
		 */
		PlayNot = 10,
		/**
		 * 必须出、发牌
		 */
		PlayMust = 11,
		/**
		 * 弃牌
		 */
		GiveUp = 12,
		/**
		 * 下注
		 */
		Wagering = 13,
		/**
		 * 跟注、重复下注、再下注
		 */
		FollowBet = 14,
		/**
		 * 起脚
		 */
		UpFoot = 15,
		/**
		 * 不踢
		 */
		NoFoot = 16,
		/**
		 * 反踢
		 */
		BackFoot = 17,
		/**
		 * 弃牌
		 */
		Fold = 18,
		/**
		 * 跟注
		 */
		Call = 19,
		/**
		 * 加注、双倍
		 */
		Raise = 20,
		Allin = 21,
		/**
		 * 看牌
		 */
		Check = 22,
		/**
		 * 比牌
		 */
		Compare = 23,
		/**
		 * 小盲注
		 */
		SmallBlind = 24,
		/**
		 * 大盲注
		 */
		BigBlind = 25,
		/**
		 * 2倍大盲
		 */
		BBlind2 = 26,
		/**
		 * 3倍大盲
		 */
		BBlind3 = 27,
		/**
		 * 4倍大盲
		 */
		BBlind4 = 28,
		/**
		 * 1/2 底池
		 */
		Pot1_2 = 29,
		/**
		 * 2/3 底池
		 */
		Pot2_3 = 30,
		/**
		 * 1倍 底池
		 */
		Pot1_1 = 31,
		/**
		 * 自动跟注
		 */
		AutoCall = 32,
		/**
		 * 锅底押注
		 */
		Pan = 33,
		/**
		 * 自动跟注取消
		 */
		AutoCallCancel = 34,
		/**
		 * 吃
		 */
		Eat = 35,
		/**
		 * 拉
		 */
		Pull = 36,
		/**
		 * 胡
		 */
		Hu = 37,
		/**
		 * 暗 == 暗杠
		 */
		Dark = 38,
		/**
		 * 报听
		 */
		Listen = 39,
		/**
		 * 下庄
		 */
		DownBanker = 40,
		/**
		 * 自动弃牌
		 */
		AutoFold = 41,
		/**
		 * 取消压注
		 */
		Cancel = 42,
		/**
		 * 推注
		 */
		PushBet = 43,
		/**
		 * 补分
		 */
		FillPoint = 44,
		/**
		 * 进贡
		 */
		PayTribute = 45,
		/**
		 * 退贡
		 */
		BackTribute = 46,
		/**
		 * 选牌
		 */
		SelectCard = 47,
		/**
		 * 比拼中路
		 */
		MiddleCompare = 48,
		/**
		 * 冰冻
		 */
		Frozen = 49,
		/**
		 *  人机对战用
		 *  拉霸用于免费游戏选择物品
		 */
		ExtOperation1 = 50,
		/**
		 * 换炮
		 */
		ChangeBattery = 51,
		/**
		 * 锁定
		 */
		Lock = 52,
		/**
		 * 取消锁定
		 */
		Unlock = 53,
		/**
		 * 拆牌
		 */
		Split = 54,
		/**
		 * 保险
		 */
		Insurance = 55,
		/**
		 * 双倍下注（黑杰克），比倍（超级大亨）
		 */
		Double = 56,
		/**
		 * 点击黑桃
		 */
		Click_Spades = 57,
		/**
		 * 点击红桃
		 */
		Click_Hearts = 58,
		/**
		 * 点击梅花
		 */
		Click_Clubs = 59,
		/**
		 * 点击方片
		 */
		Click_Diamonds = 60,
		/**
		 * 定缺
		 */
		EnsureLack = 61,
		/**
		 * 碰牌
		 */
		Touch = 62,
		/**
		 * 杠牌
		 */
		Bar = 63,
		/**
		 * 刮风
		 */
		GuaFeng = 64,
		/**
		 * 下雨
		 */
		XiaYu = 65,
		/**
		 * 过
		 */
		Pass = 66,
		/**
		 * 猜大小
		 */
		GuessSize = 67,
		/**
		 * 上庄
		 */
		BankerUp = 68,
		/**
		 * 确定
		 */
		OK = 69,
		/**
		 * 电鳗
		 */
		Numbfish = 80,
		/**
		 * 筛选电鱼
		 */
		FilterNumbfish = 81,
		/**
		 * 游戏内部的比倍功能
		 */
		Doubly = 82,
		/**
		 * 收取金币
		 */
		CollectMoney = 83,
		/**
		 * 使用道具
		 */
		UseItem = 84,
		/**
		 * 恢复金币
		 */
		RecoveryMoney = 85
	}
	/**
	 * 荣誉
	 */
	export enum GameHonor {
		/**
		 * 春天
		 */
		GameHonor_Spring = 0,
		/**
		 * 反春天
		 */
		GameHonor_SpringReverse = 1,
		/**
		 * 最大赢家
		 */
		GameHonor_WinMost = 2,
		/**
		 * 最大牌型
		 */
		GameHonor_BestCard = 3,
		/**
		 * 第一名
		 */
		GameHonor_FirstPlace = 4,
		/**
		 * 最后一名
		 */
		GameHonor_LastPlace = 5,
		/**
		 * 双贡
		 */
		GameHonor_DoubleTribute = 6,
		/**
		 * 爆炸
		 */
		GameHonor_Explode = 7,
		/**
		 * 范特西
		 */
		GameHonor_Fantasy = 8,
		/**
		 * 胜利
		 */
		GameHonor_Win = 9,
		/**
		 * 失败
		 */
		GameHonor_Lose = 10,
		/**
		 * 带帽
		 */
		GameHonor_Hat = 11,
		/**
		 * 未带帽
		 */
		GameHonor_NoHat = 12
	}
	/**
	 * 货币类型
	 */
	export enum MoneyType {
		/**
		 * 钻石
		 */
		Diamond = 0,
		/**
		 * 点数
		 */
		Point = 1,
		/**
		 * 刀分
		 */
		CutScore = 2,
		/**
		 * 积分
		 */
		CardScore = 3
	}
	/**
	 * 保单操作类型
	 */
	export enum PolicyOperationType {
		/**
		 * 保单文件
		 */
		PolicyOperationType_Policy = 1,
		/**
		 * 解压密码
		 */
		PolicyOperationType_Password = 2
	}
	export enum FishSkillType {
		/**
		 * 一网打尽
		 */
		YiWangDaJin = 1,
		/**
		 * 炸弹
		 */
		Bomb = 2,
		/**
		 * 同组炸弹
		 */
		SameGroup = 3
	}
	/**
	 * 填坑点数（）
	 */
	export class KengPoint {
		/**
		 * 自己手牌总点数（包括暗牌）
		 */
		allCardPoint: number;
		/**
		 * 自己明牌总点数
		 */
		openCardPoint: number;
		/**
		 * 自己手牌总分差（包括暗牌）
		 */
		allCardPointGap: number;
		/**
		 * 自己明牌分差
		 */
		openCardPointGap: number;
		GetType(): string { return 'Cmd.KengPoint'; }
	}
	/**
	 * 座位数据
	 */
	export class SeatData {
		/**
		 * 座位
		 */
		seatId: number;
		/**
		 * 是否准备
		 */
		isReady: boolean;
		/**
		 * 人物信息
		 */
		role: UserBriefInfo;
		/**
		 * 手牌
		 */
		handCardList: number[];
		/**
		 * 出的牌
		 */
		outCardList: number[];
		/**
		 * 在线状态
		 */
		onlineState: Cmd.OnlineState;
		/**
		 * 是否托管
		 */
		isHost: boolean;
		/**
		 * 倍数
		 */
		multiple: number;
		/**
		 * 刀分
		 */
		cutScore: number;
		/**
		 * 积分
		 */
		cardScore: number;
		/**
		 * 手牌数量,其他人手牌不发时发数量下来
		 */
		handCardNum: number;
		/**
		 * 手牌中王的数量
		 */
		kingNum: number;
		/**
		 * 追加手牌
		 */
		catchCards: number[];
		/**
		 * 填坑点数
		 */
		kengPoint: KengPoint;
		/**
		 * 是否在游戏中
		 */
		isInGame: boolean;
		/**
		 * 总投注数
		 */
		betCount: number;
		/**
		 * 是否坐下
		 */
		isSit: boolean;
		/**
		 * 状态列表
		 */
		stateList: GameState[];
		/**
		 * 推荐牌
		 */
		recommend: GameObjectData[];
		/**
		 * 追加手牌数量
		 */
		catchNum: number;
		/**
		 * 押注数据统计
		 */
		statistics: Cmd.StatisticsRoundData;
		/**
		 * 置牌（长牌用）
		 */
		placeCardList: number[];
		/**
		 * 是否报听（长牌用）1：表示已经报听，0：表示没有报听
		 */
		listened: number;
		/**
		 * 纬度
		 */
		lat: number;
		/**
		 * 经度
		 */
		lng: number;
		/**
		 * 炮的等级
		 */
		batteryId: number;
		/**
		 * 锁定的fishId
		 */
		lockFishId: number;
		/**
		 * 操作列表
		 */
		actList: Action[];
		/**
		 * 发出来的第一张牌,头牌
		 */
		firstCard: number;
		/**
		 * 理牌列表
		 */
		sortCardList: CardSetList[];
		/**
		 * 结算赢取
		 */
		profit: number;
		/**
		 * 推注
		 */
		pushBet: number;
		GetType(): string { return 'Cmd.SeatData'; }
	}
	/**
	 * 状态更新通知
	 */
	export class SeatStateUpdate_S {
		op: Cmd.UpdateOperator;
		/**
		 * 状态列表
		 */
		stateList: GameState[];
		uid: number;
		GetType(): string { return 'Cmd.SeatStateUpdate_S'; }
	}
	/**
	 * 座位数据更新
	 */
	export class SeatDataUpdateCmd_S {
		op: Cmd.UpdateOperator;
		seatData: SeatData[];
		GetType(): string { return 'Cmd.SeatDataUpdateCmd_S'; }
	}
	/**
	 * 门的筹码
	 */
	export class DoorChips {
		/**
		 * 1天2地3玄4黄 1大2小3单4双
		 */
		doorId: number;
		/**
		 * 门 总投注数
		 */
		chips: number;
		potId: number;
		uid: number;
		/**
		 * 名次
		 */
		place: number;
		actList: Action[];
		/**
		 * 当前期号
		 */
		expect: number;
		bet: number;
		GetType(): string { return 'Cmd.DoorChips'; }
	}
	export class GameStatusInfo {
		status: GameStatus;
		endTime: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		/**
		 * 超时描述
		 */
		desc: string;
		/**
		 * 结果
		 */
		lottery: Cmd.Lottery;
		/**
		 * 赛车控制前端显示
		 */
		saicheRunData: SaiCheRunData[];
		cardList: CardSetList;
		/**
		 * 轮数
		 */
		roundId: number;
		yesOrNo: boolean;
		GetType(): string { return 'Cmd.GameStatusInfo'; }
	}
	/**
	 * 拉霸游戏状态更新数据结构
	 */
	export class LabaStatusInfo {
		/**
		 * 奖池累计
		 */
		awardMultiplePool: number;
		/**
		 * 是否免费 1 | 0
		 */
		isFree: number;
		/**
		 * 返奖数据列表
		 */
		dataList: LabaStatusInfo.Data[];
		/**
		 * 调控周期内返奖倍数分布(用于调试)
		 */
		awardMultipleList: number[];
		/**
		 * 调控周期编号(用于调试)
		 */
		groupId: number;
		GetType(): string { return 'Cmd.LabaStatusInfo'; }
	}
	export module LabaStatusInfo {
		export class Data {
			/**
			 * 随机返奖倍数
			 */
			awardMultiple: number;
			/**
			 * 真实返奖倍数
			 */
			awardMultipleReal: number;
			/**
			 * 奖励货币数量
			 */
			awardPoint: number;
			/**
			 * 是否为假免费 1 | 0
			 */
			isFalseFree: number;
			/**
			 * 是否为拼盘 1 | 0
			 */
			isPinpan: number;
			/**
			 * 展示物品编号
			 */
			selectItemId: number;
			/**
			 * 特殊符号数量
			 */
			specialSymbolNum: number;
			/**
			 * 特殊符号奖励
			 */
			specialSymbolAward: number;
			/**
			 * 抽取的特殊符号价植列表
			 */
			specialSymbolValues: number[];
			totalValue: number;
			/**
			 * jackpot触发符号类型
			 */
			jackpotSpecialSymbolType: number;
			GetType(): string { return 'Cmd.LabaStatusInfo.Data'; }
		}
	}
	/**
	 * 赛车动画控制数据结构
	 */
	export class SaiCheRunData {
		/**
		 * 赛车流程
		 */
		gameProcess: SaiCheRunData.GameProcess[];
		/**
		 * 事故列表
		 */
		accident: SaiCheRunData.Accident[];
		/**
		 * 氮气瓶位置
		 */
		nosPos: SaiCheRunData.NosPos[];
		GetType(): string { return 'Cmd.SaiCheRunData'; }
	}
	export module SaiCheRunData {
		export class GameProcess {
			gamePs: Cmd.SaiCheRunData.GameProcess.GameP[];
			GetType(): string { return 'Cmd.SaiCheRunData.GameProcess'; }
		}
		export module GameProcess {
			export class GameP {
				/**
				 * 时间
				 */
				time: number;
				/**
				 * 长度
				 */
				length: number;
				/**
				 * 最大速度
				 */
				maxSpeed: number;
				/**
				 * 延时
				 */
				delay: number;
				GetType(): string { return 'Cmd.SaiCheRunData.GameProcess.GameP'; }
			}
		}
	}
	export module SaiCheRunData {
		export class Accident {
			accs: Cmd.SaiCheRunData.Accident.Acci[];
			GetType(): string { return 'Cmd.SaiCheRunData.Accident'; }
		}
		export module Accident {
			export class Acci {
				/**
				 * 图片
				 */
				pictureType: number;
				/**
				 * 类型&quot;nos&quot; &quot;xdh&quot;
				 */
				type: string;
				/**
				 * 时间
				 */
				time: string;
				/**
				 * 触发长度
				 */
				triggerLen: number;
				/**
				 * 速度变化
				 */
				speed: number;
				/**
				 * 补偿时间
				 */
				redeemtime: number;
				GetType(): string { return 'Cmd.SaiCheRunData.Accident.Acci'; }
			}
		}
	}
	export module SaiCheRunData {
		export class NosPos {
			nosPs: Cmd.SaiCheRunData.NosPos.NosP[];
			GetType(): string { return 'Cmd.SaiCheRunData.NosPos'; }
		}
		export module NosPos {
			export class NosP {
				/**
				 * 赛道编号
				 */
				nomber: number;
				/**
				 * 赛道点
				 */
				triggerLen: number;
				GetType(): string { return 'Cmd.SaiCheRunData.NosPos.NosP'; }
			}
		}
	}
	/**
	 * 游戏状态更新
	 */
	export class GameStatusUpdateCmd_S {
		statusInfo: GameStatusInfo;
		op: Cmd.UpdateOperator;
		/**
		 * 拉霸数据更新用
		 */
		labaStatusInfo: LabaStatusInfo;
		/**
		 * 玩家状态更新
		 */
		userStatusInfo: UserStatusInfo;
		winDoor: number;
		winId: number;
		statusList: GameStatusInfo[];
		GetType(): string { return 'Cmd.GameStatusUpdateCmd_S'; }
	}
	/**
	 * 本轮局牌的数据
	 */
	export class RoundData {
		/**
		 * 操作位
		 */
		opSeatId: number;
		/**
		 * 操作结束时间
		 */
		opEndTime: number;
		/**
		 * 最后的底桌底三张牌
		 */
		threeCard: number[];
		/**
		 * 倍数
		 */
		multiple: number;
		/**
		 * 地主位
		 */
		lordSeatId: number;
		/**
		 * 抢地主阶段数据
		 */
		robLordData: RoundData.RobLordData;
		callLordData: RoundData.CallLordData;
		kickData: RoundData.YesOrNoData;
		/**
		 * 底分
		 */
		pointBase: number;
		/**
		 * 所有的压注数, 用 betDoor 代替
		 */
		doorChipsSum: DoorChips[];
		/**
		 * 我的压注数   用 betMe 代替
		 */
		doorChipsMe: DoorChips[];
		/**
		 * 门的牌
		 */
		doorCard: GameObjectData[];
		/**
		 * 庄家的牌
		 */
		bankerCard: GameObjectData;
		/**
		 * 状态
		 */
		status: GameStatus;
		/**
		 * 最大压注数
		 */
		betChipsMax: number;
		/**
		 * 所处的阶段
		 */
		stage: GameStatus;
		/**
		 * 底牌
		 */
		bottomCard: number[];
		/**
		 * 排名数据
		 */
		rankList: number[];
		/**
		 * 倒计时秒数opEndTime
		 */
		leftSec: number;
		/**
		 * 可操作
		 */
		opList: Operation[];
		/**
		 * 推荐出牌
		 */
		recommend: CardSetList[];
		/**
		 * 桌内所有筹码分
		 */
		tabPoints: number;
		/**
		 * 本轮踢过玩家（kickData断线后判断玩家是否踢过）
		 */
		kickedList: number[];
		/**
		 * 门内的押注
		 */
		betDoor: BetData;
		/**
		 * 我的押注
		 */
		betMe: BetData;
		/**
		 * 德扑
		 */
		texas: TexasRoundInfo;
		/**
		 * 最小加注线
		 */
		raiseLine: number;
		/**
		 * 牌堆剩余牌数
		 */
		lastCardNum: number;
		actList: Action[];
		circle: number;
		/**
		 * 强制盲注位
		 */
		straddleId: number;
		/**
		 * 可操作的座位列表
		 */
		opSeatList: GameObjectData[];
		/**
		 * 已选的牌
		 */
		selectCard: CardSetList;
		/**
		 * 未选的牌
		 */
		noSelectCard: CardSetList;
		/**
		 * 0:延时时长 1:延时次数 2:消耗钻石树
		 */
		delay: number[];
		levelList: number[];
		award: DoorChips;
		/**
		 * 保险状态是否结束
		 */
		insuranceStateFinish: boolean;
		/**
		 * 骰子
		 */
		touziList: number[];
		/**
		 * 牌堆
		 */
		cardStack: number[];
		/**
		 * 翻牌分配阵营
		 */
		teamData: TeamData[];
		fantasy: number[];
		/**
		 * jackpot更新时间
		 */
		jackpotUpdateTime: number;
		/**
		 * jackpot刷新间隔
		 */
		jackpotInterval: number;
		/**
		 * 选择阵营（随机分配）
		 */
		teamPick: TeamData[];
		GetType(): string { return 'Cmd.RoundData'; }
	}
	export module RoundData {
		/**
		 * TODO: 换成 YesOrNo 类型
		 */
		export class RobLordData {
			/**
			 * 选择“抢地主”的座位
			 */
			sayYes: number[];
			/**
			 * 选择“不抢地主”的座位
			 */
			sayNo: number[];
			GetType(): string { return 'Cmd.RoundData.RobLordData'; }
		}
	}
	export module RoundData {
		export class CallLordData {
			/**
			 * 叫 0分 的座位号
			 */
			call0: number[];
			/**
			 * 叫 1分 的座位号
			 */
			call1: number[];
			/**
			 * 叫 2分 的座位号
			 */
			call2: number[];
			/**
			 * 叫 3分 的座位号
			 */
			call3: number[];
			/**
			 * 叫 4分 的座位号
			 */
			call4: number[];
			/**
			 * 叫 5分 的座位号
			 */
			call5: number[];
			GetType(): string { return 'Cmd.RoundData.CallLordData'; }
		}
	}
	export module RoundData {
		export class YesOrNoData {
			sayYes: number[];
			sayNo: number[];
			GetType(): string { return 'Cmd.RoundData.YesOrNoData'; }
		}
	}
	export class TeamData {
		/**
		 * 翻牌玩家
		 */
		uid: number;
		/**
		 * 翻牌位置
		 */
		pos: number;
		/**
		 * 翻牌阵营
		 */
		teamType: number;
		/**
		 * 主动阵营
		 */
		active: number;
		/**
		 * 阵营属性
		 */
		teamProps: TeamProps[];
		GetType(): string { return 'Cmd.TeamData'; }
	}
	/**
	 * 更新阵营数据
	 */
	export class UpdateTeamDataCmd_S {
		/**
		 * 阵营数据
		 */
		teamData: TeamData;
		GetType(): string { return 'Cmd.UpdateTeamDataCmd_S'; }
	}
	/**
	 * 阵营属性
	 */
	export class TeamProps {
		/**
		 * 标记阵营
		 */
		label: number;
		/**
		 * 级别
		 */
		level: number;
		GetType(): string { return 'Cmd.TeamProps'; }
	}
	/**
	 * 跑马灯触发条件
	 */
	export class NoticeTriggerInfo {
		id: number;
		statement: string;
		action: string;
		GetType(): string { return 'Cmd.NoticeTriggerInfo'; }
	}
	/**
	 * 状态信息
	 */
	export class StateInfo {
		id: number;
		name: string;
		time: number;
		GetType(): string { return 'Cmd.StateInfo'; }
	}
	/**
	 * 房间配置信息
	 */
	export class BaseRoomConfig {
		/**
		 * 下注额
		 */
		betAmountList: number[];
		/**
		 * 跑马灯条件
		 */
		noticeTriggers: NoticeTriggerInfo[];
		/**
		 * 状态列表
		 */
		stateList: StateInfo[];
		/**
		 * 一轮局数
		 */
		roundGroupLen: number;
		/**
		 * 单门下注上限
		 */
		singleDoorBetAmountMax: number;
		/**
		 * 宗门xia
		 */
		allDoorBetAmountMax: number;
		/**
		 * 显示列表
		 */
		disColumns: number;
		/**
		 * 下注百分比偏移
		 */
		betAmountSelectOffsetPercent: number;
		/**
		 * 历史条目数
		 */
		historyNum: number;
		/**
		 * 最大轮数
		 */
		roundGroupIdMax: number;
		/**
		 * 赢家排行榜条目数
		 */
		winUserRankNum: number;
		/**
		 * 房间名称
		 */
		name: string;
		/**
		 * 拉霸配置
		 */
		autoRotateList: number[];
		/**
		 * 拉霸配置
		 */
		highScoreList: number[];
		/**
		 * 门个数
		 */
		betDoorNum: number;
		/**
		 * 广播座位数
		 */
		broadcastBetSeatNum: number;
		GetType(): string { return 'Cmd.BaseRoomConfig'; }
	}
	/**
	 * 房间数据
	 */
	export class RoomData {
		roomId: number;
		/**
		 * 玩法属性,只是开关类型的
		 */
		props: number[];
		/**
		 * 座位信息
		 */
		seatList: SeatData[];
		/**
		 * 房主的uid
		 */
		ownerId: number;
		/**
		 * round 数据
		 */
		roundData: RoundData;
		/**
		 * 底分
		 */
		pointBase: number;
		/**
		 * 房间类型
		 */
		roomType: Cmd.RoomType;
		/**
		 * true 叫地主 false 抢地主
		 */
		callOrRob: boolean;
		/**
		 * 牌局总数
		 */
		gameNbr: number;
		/**
		 * 已经进行的牌局数
		 */
		gameNbrCur: number;
		/**
		 * 庄家
		 */
		banker: UserBriefInfo;
		/**
		 * 等待的上庄列表
		 */
		bankerWait: UserBriefInfo[];
		/**
		 * 房间状态
		 */
		statusInfo: GameStatusInfo;
		level: number;
		history: Cmd.History;
		/**
		 * 彩票信息
		 */
		lottery: Cmd.Lottery;
		/**
		 * 解散房间信息
		 */
		dissolve: DissolveRoomUpdateCmd_S;
		roomState: Cmd.RoomState;
		/**
		 * 喜分（填坑）
		 */
		happyPoint: number;
		/**
		 * 谁来控制开始游戏操作
		 */
		startGameOpId: number;
		/**
		 * 房间最大人数
		 */
		maxUserNum: number;
		/**
		 * 状态列表
		 */
		stateList: GameState[];
		/**
		 * 最小值
		 */
		pointLimit: number;
		/**
		 * 底注
		 */
		bottomPoint: number;
		/**
		 * 入场
		 */
		enteringPoint: number;
		/**
		 * 离场
		 */
		leavingPoint: number;
		/**
		 * 创建者
		 */
		owner: UserBriefInfo;
		/**
		 * 俱乐部
		 */
		club: Cmd.ClubInfo;
		/**
		 * 观众
		 */
		audienceList: GameObjectData[];
		/**
		 * 房间内所有玩家的金钱统计
		 */
		moneyData: GameObjectData[];
		/**
		 * 德扑数据
		 */
		texas: Cmd.TexasConfig;
		/**
		 * 投票数据
		 */
		voteData: VoteData;
		/**
		 * 可进行的动作
		 */
		actList: Action[];
		gameNumList: GameNumber[];
		/**
		 * 报名人
		 */
		signList: UserBriefInfo[];
		/**
		 * 排名
		 */
		rankList: GameObjectData[];
		/**
		 * 升盲倒计时 废弃
		 */
		leftSecBlind: number;
		/**
		 * 倒计时
		 */
		leftSec: number;
		/**
		 * 最小匹配分
		 */
		minMatchPoint: number;
		/**
		 * 保单数量
		 */
		policyNumber: number;
		/**
		 * 如果是重连回来,需要清除所有之前的状态,需要加个标志,1表示清除所有桌面状态
		 */
		clear: number;
		/**
		 * 服务器时间戳
		 */
		timestamp: number;
		/**
		 * 座位数量
		 */
		seatNumber: number;
		/**
		 * 倒计时列表
		 */
		countdownList: Countdown[];
		/**
		 * 十点半房间属性：1:金豆场 2:钻石场
		 */
		coinorDiamond: number;
		/**
		 * 房间编号
		 */
		serialNum: number;
		/**
		 * 十点半房费，1 所有玩家都支付 0 仅赢家支付
		 */
		tipsType: number;
		/**
		 * 十点半 费率
		 */
		coinGameCost: number;
		/**
		 * 十点半离场
		 */
		leaveCarry: number;
		/**
		 * 十点半入场
		 */
		lowestCarry: number;
		/**
		 * 十点半场次 1:普通匹配场 2:中级匹配场 3:高级匹配场 4:顶级匹配场
		 */
		sceneType: number;
		/**
		 * 鱼列表
		 */
		fishlist: FishInfo[];
		/**
		 * 子弹信息
		 */
		bulletinfo: BulletInfo[];
		/**
		 * 场景id
		 */
		sceneId: number;
		/**
		 * 期数
		 */
		roundNum: number;
		/**
		 * 冰冻的结束时间
		 */
		frozenEndTime: number;
		/**
		 * 房间配置
		 */
		baseRoomConfig: BaseRoomConfig;
		/**
		 * 道具信息
		 */
		items: ItemInfo[];
		/**
		 * 冰冻的玩家Uid
		 */
		frozenUserId: number;
		/**
		 * 庄家
		 */
		dealer: number;
		/**
		 * jackpot奖池信息,捕鱼用
		 */
		jackpot: number;
		/**
		 * 阵营数据
		 */
		teamData: TeamData;
		statusList: GameStatusInfo[];
		/**
		 * 1表示观战模式
		 */
		visitor: number;
		/**
		 * 当前房间人数
		 */
		userNbrCur: number;
		GetType(): string { return 'Cmd.RoomData'; }
	}
	/**
	 * 道具相关信息
	 */
	export class ItemInfo {
		/**
		 * 道具id
		 */
		id: number;
		/**
		 * 道具数量
		 */
		num: number;
		GetType(): string { return 'Cmd.ItemInfo'; }
	}
	/**
	 * 发送道具相关信息
	 */
	export class SendItemInfo_S {
		/**
		 * 道具信息
		 */
		items: ItemInfo[];
		GetType(): string { return 'Cmd.SendItemInfo_S'; }
	}
	/**
	 * 十点半独立倒计时
	 */
	export class SendPersonalCountDown_S {
		/**
		 * 剩余时间
		 */
		leftSec: number;
		GetType(): string { return 'Cmd.SendPersonalCountDown_S'; }
	}
	/**
	 * 倒计时
	 */
	export class Countdown {
		ctype: Countdown.CountdownType;
		leftSec: number;
		GetType(): string { return 'Cmd.Countdown'; }
	}
	export module Countdown {
		export enum CountdownType {
			/**
			 * 升盲
			 */
			RiseBlind = 1,
			/**
			 * 买入
			 */
			BuyBring = 2
		}
	}
	/**
	 * 倒计时更新
	 */
	export class CountdownUpdateCmd_S {
		/**
		 * 倒计时列表
		 */
		countdownList: Countdown[];
		op: Cmd.UpdateOperator;
		GetType(): string { return 'Cmd.CountdownUpdateCmd_S'; }
	}
	/**
	 * 房间数据更新
	 */
	export class RoomDataUpdateCmd_S {
		roomData: RoomData;
		/**
		 * 其他人的混合牌,记牌器用
		 */
		leftCardList: number[];
		GetType(): string { return 'Cmd.RoomDataUpdateCmd_S'; }
	}
	/**
	 * 房间玩家更新
	 */
	export class RoomSeatUpdateCmd_S {
		op: Cmd.UpdateOperator;
		seatData: SeatData[];
		GetType(): string { return 'Cmd.RoomSeatUpdateCmd_S'; }
	}
	/**
	 * 解散房间请求
	 */
	export class DissolveRoomRequestCmd_C {
		roomId: number;
		GetType(): string { return 'Cmd.DissolveRoomRequestCmd_C'; }
	}
	/**
	 * 回复解散房间请求
	 */
	export class DissolveRoomReturnCmd_C {
		yesOrNo: boolean;
		roomId: number;
		GetType(): string { return 'Cmd.DissolveRoomReturnCmd_C'; }
	}
	/**
	 * 解散房间数据更新
	 */
	export class DissolveRoomUpdateCmd_S {
		/**
		 * 发起人
		 */
		sponsor: string;
		voterList: DissolveRoomUpdateCmd_S.Voter[];
		/**
		 * 解散房间结束时间
		 */
		endTime: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		roomId: number;
		/**
		 * 是否结算
		 */
		dissolve: boolean;
		GetType(): string { return 'Cmd.DissolveRoomUpdateCmd_S'; }
	}
	export module DissolveRoomUpdateCmd_S {
		export class Voter {
			uid: number;
			/**
			 * 投票人名称
			 */
			name: string;
			/**
			 * 同意 / 等待
			 */
			yesOrWait: boolean;
			GetType(): string { return 'Cmd.DissolveRoomUpdateCmd_S.Voter'; }
		}
	}
	/**
	 * 投票数据
	 */
	export class VoteData {
		voterList: VoteData.Voter[];
		/**
		 * 什么样的投票
		 */
		vote: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		/**
		 * 发起人
		 */
		sponsor: string;
		GetType(): string { return 'Cmd.VoteData'; }
	}
	export module VoteData {
		export class Voter {
			uid: number;
			/**
			 * 投票人名称
			 */
			name: string;
			/**
			 * 动作
			 */
			act: number;
			GetType(): string { return 'Cmd.VoteData.Voter'; }
		}
	}
	/**
	 * 投票发起
	 */
	export class VoteLaunchCmd_C {
		vote: number;
		GetType(): string { return 'Cmd.VoteLaunchCmd_C'; }
	}
	/**
	 * 投票选择
	 */
	export class VoteSelectCmd_C {
		act: number;
		vote: number;
		GetType(): string { return 'Cmd.VoteSelectCmd_C'; }
	}
	/**
	 * 投票数据更新
	 */
	export class VoteUpdateCmd_S {
		data: VoteData;
		voter: VoteData.Voter[];
		GetType(): string { return 'Cmd.VoteUpdateCmd_S'; }
	}
	/**
	 * 启动牌局
	 */
	export class EnableRoundCmd_CS {
		roomId: number;
		startAt: number;
		GetType(): string { return 'Cmd.EnableRoundCmd_CS'; }
	}
	/**
	 * 徳扑游戏数据
	 */
	export class TexasRoundInfo {
		/**
		 * 庄家
		 */
		dealer: number;
		/**
		 * 小盲位
		 */
		sbSeatId: number;
		/**
		 * 大盲位
		 */
		bbSeatId: number;
		/**
		 * 小盲
		 */
		smallBlind: number;
		/**
		 * 分池
		 */
		devidePot: number[];
		/**
		 * 总池
		 */
		sumPot: number;
		/**
		 * 押注圈
		 */
		circle: number;
		/**
		 * 玩家数据
		 */
		playerList: GameObjectData[];
		/**
		 * 保险
		 */
		insurance: InsuranceData;
		/**
		 * 最高注
		 */
		standardId: number;
		GetType(): string { return 'Cmd.TexasRoundInfo'; }
	}
	/**
	 *  C-&gt;S 开始游戏请求
	 *  S-&gt;C 开始游戏通知
	 */
	export class StartGameCmd_CS {
		/**
		 * 现在进行第几局
		 */
		gameNbrCur: number;
		/**
		 * 最大压注数
		 */
		betChipsMax: number;
		GetType(): string { return 'Cmd.StartGameCmd_CS'; }
	}
	/**
	 * 游戏开始
	 */
	export class StartGameCmd_S {
		/**
		 * 牌局总数
		 */
		gameNbr: number;
		/**
		 * 现在进行第几局
		 */
		gameNbrCur: number;
		/**
		 * 最大压注数
		 */
		betChipsMax: number;
		/**
		 * 保单数量
		 */
		policyNumber: number;
		/**
		 * 徳扑开局数据
		 */
		texas: TexasRoundInfo;
		fantasy: number[];
		GetType(): string { return 'Cmd.StartGameCmd_S'; }
	}
	/**
	 * 展示牌请求
	 */
	export class DisplayCardCmd_CS {
		each: GameObjectData[];
		result: boolean;
		GetType(): string { return 'Cmd.DisplayCardCmd_CS'; }
	}
	/**
	 * 发牌
	 */
	export class DealCardCmd_S {
		/**
		 * 每个座位的牌
		 */
		seatCardList: SeatData[];
		/**
		 * 每个门的牌
		 */
		door: GameObjectData[];
		/**
		 * 庄稼的牌和各回各家&#183;`
		 */
		banker: GameObjectData;
		/**
		 * 叫分牌,斗地主叫分用
		 */
		callCard: number;
		/**
		 * 开始叫分的玩家
		 */
		callUid: number;
		/**
		 * 其他人的混合牌,记牌器用
		 */
		leftCardList: number[];
		/**
		 * 发牌类型:1 或不发表示覆盖,2表示追加,3表示删除
		 */
		dealCardType: Cmd.UpdateOperator;
		/**
		 * 当局牌库剩余数量
		 */
		lastCardNum: number;
		/**
		 * 洗牌者id
		 */
		shuffleUid: number;
		GetType(): string { return 'Cmd.DealCardCmd_S'; }
	}
	/**
	 * 更新手牌
	 */
	export class HandCardUpdateCmd_S {
		op: Cmd.UpdateOperator;
		update: GameObjectData[];
		GetType(): string { return 'Cmd.HandCardUpdateCmd_S'; }
	}
	/**
	 * 牌集列表
	 */
	export class CardSetList {
		/**
		 * 手牌
		 */
		cardSet: number[];
		/**
		 * 牌型
		 */
		typ: CardSetType;
		/**
		 * 关键牌
		 */
		key: number[];
		/**
		 * 牌数
		 */
		num: number;
		/**
		 * 比较大小的牌
		 */
		best: number[];
		/**
		 * 多顺（具体数量）
		 */
		sNum: number;
		/**
		 * 替换牌
		 */
		replaceSet: number[];
		GetType(): string { return 'Cmd.CardSetList'; }
	}
	/**
	 * 操作位轮转
	 */
	export class NewOperateSeatCmd_S {
		seatId: number;
		/**
		 * 推荐出牌
		 */
		cardSetList: CardSetList[];
		/**
		 * 牌型
		 */
		cardListType: CardSetType;
		/**
		 * 操作bit位 废弃:使用 opList 代替
		 */
		opBit: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		/**
		 * 可操作列表
		 */
		opList: Operation[];
		/**
		 * 操作结束时间 废弃: 使用 leftSec 代替
		 */
		endTime: number;
		/**
		 * 最低加注线
		 */
		raiseLine: number;
		/**
		 * 是否是第一手牌
		 */
		isFirstOp: number;
		/**
		 * 继续比牌
		 */
		continueCompare: boolean;
		/**
		 * 0:延时时长 1:延时次数 2:消耗钻石树
		 */
		delay: number[];
		/**
		 * 可进行的动作
		 */
		actList: Action[];
		cardSet: CardSetList;
		uid: number;
		GetType(): string { return 'Cmd.NewOperateSeatCmd_S'; }
	}
	/**
	 * 排名通知
	 */
	export class RankUpdateCmd_S {
		seatId: number;
		place: number;
		rankList: GameObjectData[];
		GetType(): string { return 'Cmd.RankUpdateCmd_S'; }
	}
	/**
	 * 打出去的牌
	 */
	export class PlayCardInfo {
		uid: number;
		/**
		 * 打出的牌
		 */
		cardList: number[];
		/**
		 * 打出牌的类型
		 */
		cardListType: CardSetType;
		replace: number[];
		/**
		 * 剩余牌数
		 */
		handcardNum: number;
		/**
		 * 倍数
		 */
		multiple: number;
		/**
		 * 牛牛希望知道最后一张发的牌,防作弊
		 */
		lastCard: number;
		GetType(): string { return 'Cmd.PlayCardInfo'; }
	}
	/**
	 *  C-&gt;S 出牌请求
	 *  S-&gt;C 出牌通知
	 */
	export class PlayCardCmd_CS {
		uid: number;
		/**
		 * 打出的牌
		 */
		cardList: number[];
		/**
		 * 打出牌的类型
		 */
		cardListType: CardSetType;
		replace: number[];
		/**
		 * 剩余牌数
		 */
		handcardNum: number;
		/**
		 * 倍数
		 */
		multiple: number;
		list: PlayCardInfo[];
		/**
		 * 操作类型
		 */
		op: Operation;
		/**
		 * 分数
		 */
		score: number;
		/**
		 * 替换牌
		 */
		replaceCard: number[];
		GetType(): string { return 'Cmd.PlayCardCmd_CS'; }
	}
	/**
	 * 获取玩家综合信息
	 */
	export class GetUserFullInfoCmd_CS {
		need: Cmd.MsgType[];
		/**
		 * 玩家基本信息
		 */
		role: Cmd.UserBaseInfo;
		/**
		 * 战绩数据
		 */
		statisticsData: Cmd.StatisticsRoundData[];
		/**
		 * 玩家加入俱乐部
		 */
		joinList: Cmd.ClubInfo[];
		GetType(): string { return 'Cmd.GetUserFullInfoCmd_CS'; }
	}
	/**
	 * 底牌更新通知
	 */
	export class BottomCardUpdateCmd_S {
		bottomCard: number[];
		num: number;
		GetType(): string { return 'Cmd.BottomCardUpdateCmd_S'; }
	}
	/**
	 *  C-&gt;S 抢地主请求
	 *  S-&gt;C 玩家抢地主通知
	 */
	export class LandlordRobCmd_CS {
		uid: number;
		/**
		 * 抢 还是 不抢
		 */
		yesOrNo: boolean;
		GetType(): string { return 'Cmd.LandlordRobCmd_CS'; }
	}
	/**
	 *  C-&gt;S 叫地主请求
	 *  S-&gt;C 玩家叫地主通知
	 */
	export class LandlordCallCmd_CS {
		uid: number;
		point: number;
		/**
		 * 补发
		 */
		isReplenish: boolean;
		GetType(): string { return 'Cmd.LandlordCallCmd_CS'; }
	}
	/**
	 * 轮到玩家抢/叫地主通知
	 */
	export class LandlordOptionCmd_S {
		uid: number;
		/**
		 * 操作结束时间
		 */
		endTime: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		/**
		 * 可操作列表
		 */
		opList: Operation[];
		GetType(): string { return 'Cmd.LandlordOptionCmd_S'; }
	}
	/**
	 * 产生地主通知
	 */
	export class LandlordUpdateCmd_S {
		/**
		 * 地主
		 */
		uid: number;
		/**
		 * 三张底牌
		 */
		threeCard: number[];
		/**
		 * 抢注倍数
		 */
		point: number;
		GetType(): string { return 'Cmd.LandlordUpdateCmd_S'; }
	}
	/**
	 * 底分更新通知
	 */
	export class PointBaseUpdateCmd_S {
		pointBase: number;
		GetType(): string { return 'Cmd.PointBaseUpdateCmd_S'; }
	}
	/**
	 * 游戏数字
	 */
	export class GameNumber {
		typ: GameNumber.Type;
		value: number;
		GetType(): string { return 'Cmd.GameNumber'; }
	}
	export module GameNumber {
		export enum Type {
			/**
			 * 底分
			 */
			PointBase = 1,
			/**
			 * 底注
			 */
			PointBottom = 2,
			/**
			 * 锅底分
			 */
			Pan = 3,
			/**
			 * 底池
			 */
			Pool = 4
		}
	}
	/**
	 * 数字更新
	 */
	export class GameNumberUpdateCmd_S {
		number: GameNumber[];
		GetType(): string { return 'Cmd.GameNumberUpdateCmd_S'; }
	}
	/**
	 *  轮到玩家抢地主通知
	 *  废弃，随后删除，请使用 LandlordOptionCmd_S
	 */
	export class LandlordRobOptionCmd_S {
		uid: number;
		/**
		 * 操作结束时间
		 */
		endTime: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		GetType(): string { return 'Cmd.LandlordRobOptionCmd_S'; }
	}
	/**
	 * 轮到玩家 踢 操作
	 */
	export class KickPlayOptionalCmd_S {
		uid: number;
		endTime: number;
		/**
		 * 倒计时秒数
		 */
		leftSec: number;
		GetType(): string { return 'Cmd.KickPlayOptionalCmd_S'; }
	}
	/**
	 *  C-&gt;S 踢 操作请求
	 *  S-&gt;C 踢 操作通知
	 */
	export class KickPlayCmd_CS {
		uid: number;
		yesOrNo: boolean;
		GetType(): string { return 'Cmd.KickPlayCmd_CS'; }
	}
	/**
	 * 倍数更新
	 */
	export class MultipleUpdateCmd_S {
		update: MultipleUpdateCmd_S.Update[];
		/**
		 * 废弃
		 */
		multiple: number;
		GetType(): string { return 'Cmd.MultipleUpdateCmd_S'; }
	}
	export module MultipleUpdateCmd_S {
		export class Update {
			seatId: number;
			multiple: number;
			GetType(): string { return 'Cmd.MultipleUpdateCmd_S.Update'; }
		}
	}
	/**
	 * 游戏对象
	 */
	export class GameObjectData {
		/**
		 * 门id
		 */
		doorId: number;
		user: UserBriefInfo;
		/**
		 * 第几局, 排名
		 */
		order: number;
		/**
		 * 牌
		 */
		cardList: number[];
		/**
		 * 牌型
		 */
		cardType: CardSetType;
		/**
		 * 现在的分数
		 */
		point: number;
		/**
		 * 利润
		 */
		profit: number;
		/**
		 * 倍数
		 */
		multiple: number;
		/**
		 * 关键牌
		 */
		keyCard: number[];
		honorId: number[];
		/**
		 * 手牌点数
		 */
		kengPoint: KengPoint;
		betResult: BetResult;
		/**
		 * 牌集列表
		 */
		cardSetList: CardSetList[];
		/**
		 * 创建时间
		 */
		createdAt: number;
		/**
		 * 消息
		 */
		msg: string;
		/**
		 * 职位
		 */
		post: number;
		clubId: number;
		/**
		 * 押注数据统计
		 */
		statistics: Cmd.StatisticsRoundData;
		sum: number;
		/**
		 * 每个池赢得的筹码
		 */
		potWin: DoorChips[];
		/**
		 * 牌集
		 */
		cardSet: CardSetList;
		seatId: number;
		/**
		 * 可操作列表
		 */
		opList: Operation[];
		/**
		 * 押注
		 */
		act: Action;
		/**
		 * 是否漂
		 */
		piao: boolean;
		/**
		 * 是否报胡
		 */
		bao: boolean;
		happyPoint: number;
		/**
		 * 级别
		 */
		level: number;
		itemList: Cmd.History.HistoryInfo[];
		honor: GameHonor;
		middleComparePoint: number;
		/**
		 * 显示的牌
		 */
		cardShow: CardSetList;
		/**
		 * 可能的牌型
		 */
		possibleType: number[];
		/**
		 * 单局得分
		 */
		score: number;
		/**
		 * 总得分
		 */
		allScore: number;
		channelList: Action[];
		foldList: number[];
		honorList: GameHonor[];
		/**
		 * 双扣的基础分
		 */
		basicScore: number;
		GetType(): string { return 'Cmd.GameObjectData'; }
	}
	export class BetResult {
		/**
		 * 数位押注数
		 */
		digitBetChipsList: number[];
		/**
		 * 数位押注利润
		 */
		digitProfitList: number[];
		/**
		 * 合数押注数
		 */
		sumBetChipsTotal: number;
		/**
		 * 合数押注利润
		 */
		sumProfitTotal: number;
		GetType(): string { return 'Cmd.BetResult'; }
	}
	/**
	 * 牌局结束后结算通知
	 */
	export class RoundResultCmd_S {
		resultList: GameObjectData[];
		/**
		 * 地主id
		 */
		landlord: number;
		/**
		 * 赢家
		 */
		winnerList: number[];
		/**
		 * 庄家数据
		 */
		bankerData: GameObjectData;
		/**
		 * 4个门 数据
		 */
		doorsData: GameObjectData[];
		/**
		 * 自己的数据
		 */
		myData: GameObjectData;
		/**
		 * 四个门的输赢
		 */
		winLose: number;
		/**
		 * 荣誉
		 */
		honor: GameHonor[];
		/**
		 * 本期彩票数据
		 */
		lottery: Cmd.Lottery;
		/**
		 * 下期彩票
		 */
		lotteryNext: Cmd.Lottery;
		/**
		 * 是否还有下一局
		 */
		haveNextRound: boolean;
		/**
		 * 二人斗地主用,未发下去的底牌
		 */
		otherCardList: number[];
		/**
		 * 喜分（填坑）
		 */
		happyPoint: number;
		/**
		 * 是否是断线重连后补发的消息
		 */
		isReplenish: boolean;
		/**
		 * 同比分
		 */
		eachCompare: GameObjectData[];
		/**
		 * 结算面板显示切锅按钮
		 */
		showCutPot: number;
		/**
		 * 牌九标记爆锅
		 */
		explodePot: number;
		/**
		 * 一圈数据
		 */
		circleEnd: CircleEndCmd_S;
		/**
		 * 可以洗牌的人
		 */
		shuffleUid: number;
		/**
		 * 不填或者0表示免费,填了就是消耗几个钻
		 */
		shuffleCost: number;
		/**
		 * 为1时显示过低保护
		 */
		protectInfo: number;
		GetType(): string { return 'Cmd.RoundResultCmd_S'; }
	}
	/**
	 *  C-&gt;S 获取观众信息
	 *  S-&gt;C 通知观众信息
	 */
	export class AudienceUpdateCmd_CS {
		roomId: number;
		audienceList: Cmd.UserBaseInfo[];
		leftSec: number;
		GetType(): string { return 'Cmd.AudienceUpdateCmd_CS'; }
	}
	/**
	 * 房间最后的结算通知
	 */
	export class FinalResult_S {
		recordList: FinalResult_S.Record[];
		/**
		 * 大赢家
		 */
		userWinMost: number;
		/**
		 * 游戏总局数
		 */
		gameNum: number;
		/**
		 * 解散原因
		 */
		reason: string;
		/**
		 * 总结算新老逻辑标识 有表示新版本 没有表示老版本
		 */
		isNew: number;
		/**
		 * 如果是匹配号房间,显示出匹配号
		 */
		matchId: number;
		/**
		 * 喜分（填坑）
		 */
		happyPoint: number;
		/**
		 * 德扑
		 */
		texas: StatisticsRoomData;
		GetType(): string { return 'Cmd.FinalResult_S'; }
	}
	export module FinalResult_S {
		export class Record {
			user: UserBriefInfo;
			/**
			 * 每一局数据
			 */
			resultList: GameObjectData[];
			/**
			 * 总利润
			 */
			profitSum: number;
			/**
			 * 最大利润
			 */
			profitMax: number;
			/**
			 * 赢局数
			 */
			winNum: number;
			/**
			 * 赢局数
			 */
			gameNum: number;
			/**
			 * 坐庄数
			 */
			bankerNum: number;
			/**
			 * 炸弹数量
			 */
			bombNum: number;
			/**
			 * 最好牌型
			 */
			bestCardType: CardSetType;
			/**
			 * 红包 没有红包为空
			 */
			redpack: number;
			totalInfo: GameObjectData[];
			GetType(): string { return 'Cmd.FinalResult_S.Record'; }
		}
	}
	/**
	 *  gm指令
	 *  C-&gt;S 获取所有可选牌
	 *  S-&gt;C 所有可选牌更新
	 */
	export class GmAvailableCardUpdateCmd_CS {
		/**
		 * 所有可选的牌
		 */
		cardList: number[];
		/**
		 *  废弃, 建议使用 select 字段代替
		 *  每个座位已经选的牌
		 */
		seatSelect: GmAvailableCardUpdateCmd_CS.SeatSelectData[];
		roomId: number;
		/**
		 * 每个座位已经选的牌
		 */
		seatCardList: GameObjectData[];
		/**
		 * 底牌
		 */
		board: number[];
		GetType(): string { return 'Cmd.GmAvailableCardUpdateCmd_CS'; }
	}
	export module GmAvailableCardUpdateCmd_CS {
		export class SeatSelectData {
			seatId: number;
			/**
			 * 所选的牌
			 */
			selectCard: number[];
			GetType(): string { return 'Cmd.GmAvailableCardUpdateCmd_CS.SeatSelectData'; }
		}
	}
	/**
	 *  gm指令
	 *  选牌请求
	 */
	export class GmSelectCardCmd_C {
		cardList: number[];
		roomId: number;
		/**
		 * 每个座位已经选的牌
		 */
		seatCardList: GameObjectData[];
		/**
		 * 底牌
		 */
		board: number[];
		GetType(): string { return 'Cmd.GmSelectCardCmd_C'; }
	}
	/**
	 *  gm指令
	 *  结束牌局请求
	 */
	export class GmFinishRoundCmd_C {
		GetType(): string { return 'Cmd.GmFinishRoundCmd_C'; }
	}
	/**
	 *  gm指令
	 *  通用gm指令
	 */
	export class GmCommandCmd_C {
		/**
		 *  字符串的json字段由前后端自由约定
		 *  例如: {&quot;do&quot;:&quot;RaiseBring&quot;, &quot;num&quot;:10000, &quot;roomId&quot;:111111, &quot;uid&quot;:123321}
		 *  玩家(uid:123321)在房间(roomId:111111)带入(do:RaiseBring)筹码10000
		 *  json 字符串
		 */
		command: string;
		GetType(): string { return 'Cmd.GmCommandCmd_C'; }
	}
	/**
	 * 数位投注
	 */
	export class DigitChips {
		/**
		 * 数位, 个位
		 */
		digit: DigitChips.Digit;
		/**
		 * 数字
		 */
		number: number;
		/**
		 * 投注数
		 */
		chips: number;
		GetType(): string { return 'Cmd.DigitChips'; }
	}
	export module DigitChips {
		/**
		 * 数位
		 */
		export enum Digit {
			One = 1,
			Ten = 2,
			Hundred = 3,
			Thousand = 4
		}
	}
	/**
	 *  C-&gt;S 压注请求
	 *  S-&gt;C 压注通知
	 */
	export class BetRoomCmd_CS {
		bet: DoorChips;
		uid: number;
		/**
		 * 筹码
		 */
		chip: number;
		/**
		 * 操作类型
		 */
		opType: Operation;
		betDigit: DigitChips;
		betSum: DoorChips;
		betNumber: DoorChips;
		circle: number;
		actList: Action[];
		act: Action;
		roomId: number;
		/**
		 * 子弹信息
		 */
		bulletinfo: BulletInfo;
		/**
		 * 最高注
		 */
		standardId: number;
		GetType(): string { return 'Cmd.BetRoomCmd_CS'; }
	}
	/**
	 * /////////////////十点半 服务费刷新协议
	 */
	export class RefreshMoney_S {
		pointSet: pointSet[];
		GetType(): string { return 'Cmd.RefreshMoney_S'; }
	}
	/**
	 * 每个玩家信息
	 */
	export class pointSet {
		/**
		 * 用户id
		 */
		uid: number;
		/**
		 * 分数
		 */
		point: number;
		/**
		 * 位置ID
		 */
		seatId: number;
		GetType(): string { return 'Cmd.pointSet'; }
	}
	/**
	 * 动作
	 */
	export class Action {
		uid: number;
		op: Operation;
		/**
		 * 增加的筹码
		 */
		chipsAdd: number;
		/**
		 * 剩余筹码
		 */
		chipsLeft: number;
		/**
		 * 总押注
		 */
		chipsBet: number;
		/**
		 * 总底池
		 */
		sumPot: number;
		chips: number;
		id: number;
		/**
		 * 1天2地3玄4黄 1大2小3单4双
		 */
		doorId: number;
		timestamp: number;
		yesOrNo: boolean;
		cardSetList: CardSetList;
		userList: GameObjectData[];
		value: number;
		extvalue: number[];
		/**
		 * 押注类型 1:全部 2:一半 3:一倍
		 */
		betType: number;
		/**
		 * 送胡的座位id
		 */
		loseSeatId: number;
		channel: number;
		cardId: number;
		cardList: number[];
		cardType: CardSetType;
		profit: number;
		status: GameStatus;
		GetType(): string { return 'Cmd.Action'; }
	}
	/**
	 * 更新可以进行的动作
	 */
	export class UpdateActionCmd_S {
		actList: Action[];
		GetType(): string { return 'Cmd.UpdateActionCmd_S'; }
	}
	/**
	 *  C-&gt;S 玩家进行操作请求
	 *  S-&gt;C 玩家进行操作通知
	 */
	export class UserActionCmd_CS {
		act: Action;
		GetType(): string { return 'Cmd.UserActionCmd_CS'; }
	}
	/**
	 *  C-&gt;S 操作延时请求
	 *  S-&gt;C 操作延时通知
	 */
	export class BetDelayCmd_C {
		roomId: number;
		GetType(): string { return 'Cmd.BetDelayCmd_C'; }
	}
	/**
	 * 押注数据
	 */
	export class BetData {
		betNumber: DoorChips[];
		betDigit: DigitData;
		betSum: DoorChips[];
		GetType(): string { return 'Cmd.BetData'; }
	}
	/**
	 *  C-&gt;S 看牌请求
	 *  S-&gt;C 看牌通知
	 */
	export class CheckCardCmd_CS {
		cardList: number[];
		uid: number;
		channelList: Action[];
		GetType(): string { return 'Cmd.CheckCardCmd_CS'; }
	}
	/**
	 * 门筹码更新 废弃 用BetUpdateCmd_S代替
	 */
	export class DoorUpdataCmd_S {
		DoorChips: DoorChips[];
		GetType(): string { return 'Cmd.DoorUpdataCmd_S'; }
	}
	/**
	 * 数位押注的数据
	 */
	export class DigitData {
		/**
		 * 个位押注数
		 */
		one: DigitChips[];
		/**
		 * 十位
		 */
		ten: DigitChips[];
		/**
		 * 百位
		 */
		hundred: DigitChips[];
		/**
		 * 千位
		 */
		thousand: DigitChips[];
		GetType(): string { return 'Cmd.DigitData'; }
	}
	/**
	 * 压注数更新
	 */
	export class BetUpdateCmd_S {
		betData: BetData;
		max: number;
		GetType(): string { return 'Cmd.BetUpdateCmd_S'; }
	}
	/**
	 * 上庄请求
	 */
	export class BankerUpCmd_C {
		GetType(): string { return 'Cmd.BankerUpCmd_C'; }
	}
	/**
	 * 下庄请求
	 */
	export class BankerDownCmd_C {
		GetType(): string { return 'Cmd.BankerDownCmd_C'; }
	}
	/**
	 * 上庄列表更新
	 */
	export class BankerWaitListUpdateCmd_S {
		op: Cmd.UpdateOperator;
		waitList: UserBriefInfo[];
		GetType(): string { return 'Cmd.BankerWaitListUpdateCmd_S'; }
	}
	/**
	 * 更新庄家信息
	 */
	export class BankerUpdateCmd_S {
		/**
		 * 庄家信息
		 */
		banker: UserBriefInfo;
		/**
		 * 连庄局数
		 */
		continueNum: number;
		/**
		 * 庄家更新类型
		 */
		continueOrChange: boolean;
		GetType(): string { return 'Cmd.BankerUpdateCmd_S'; }
	}
	/**
	 * 随机显示一组牌
	 */
	export class ShowRandomCardCmd_S {
		list: CardSetList;
		/**
		 * 混值
		 */
		point: number;
		GetType(): string { return 'Cmd.ShowRandomCardCmd_S'; }
	}
	/**
	 * 货币更新通知
	 */
	export class MoneyUpdateCmd_S {
		/**
		 * 玩家身上的钱
		 */
		update: MoneyUpdateCmd_S.Update[];
		/**
		 * 桌子上的钱
		 */
		moneyData: Cmd.StatisticsRoundData[];
		GetType(): string { return 'Cmd.MoneyUpdateCmd_S'; }
	}
	export module MoneyUpdateCmd_S {
		export class Update {
			money: MoneyType;
			/**
			 * 总贡献分
			 */
			num: number;
			uid: number;
			/**
			 * 每次出炸弹的贡献分
			 */
			bombPoint: number;
			/**
			 * 变化的分数
			 */
			changeNum: number;
			GetType(): string { return 'Cmd.MoneyUpdateCmd_S.Update'; }
		}
	}
	/**
	 *  C-&gt;S 请求历史数据
	 *  S-&gt;C 历史数据更新
	 */
	export class HistoryUpdateCmd_CS {
		/**
		 * 需要数据的开始索引
		 */
		index: number;
		/**
		 * 需要的数量
		 */
		num: number;
		globalRoomId: number;
		history: Cmd.History;
		/**
		 * 第几局
		 */
		roundNo: number;
		items: GameObjectData[];
		GetType(): string { return 'Cmd.HistoryUpdateCmd_CS'; }
	}
	/**
	 *  C-&gt;S 坐下请求
	 *  S-&gt;C 坐下通知
	 */
	export class SitDownCmd_CS {
		uid: number;
		seatId: number;
		roomId: number;
		GetType(): string { return 'Cmd.SitDownCmd_CS'; }
	}
	/**
	 * 坐起请求
	 */
	export class SitUpCmd_C {
		roomId: number;
		GetType(): string { return 'Cmd.SitUpCmd_C'; }
	}
	/**
	 * 强制站起
	 */
	export class SitUpForceCmd_C {
		roomId: number;
		uid: number;
		GetType(): string { return 'Cmd.SitUpForceCmd_C'; }
	}
	/**
	 * 开始游戏操作位更新
	 */
	export class StartGameOpIdUpdate_S {
		/**
		 * 谁来控制开始游戏操作
		 */
		startGameOpId: number;
		GetType(): string { return 'Cmd.StartGameOpIdUpdate_S'; }
	}
	/**
	 *  C-&gt;S 请求亮牌
	 *  S-&gt;C 请求亮牌通知
	 */
	export class ShowMyCardUpdateCmd_CS {
		roomId: number;
		cardList: number[];
		uid: number;
		cardShow: CardSetList;
		cardSet: CardSetList;
		/**
		 * 牌局是否结束
		 */
		isOver: number;
		GetType(): string { return 'Cmd.ShowMyCardUpdateCmd_CS'; }
	}
	/**
	 * 通知客户端显示具体的牌
	 */
	export class ShowCards_S {
		cards: ShowCards_S.Cards[];
		GetType(): string { return 'Cmd.ShowCards_S'; }
	}
	export module ShowCards_S {
		export class Cards {
			uid: number;
			cards: number[];
			GetType(): string { return 'Cmd.ShowCards_S.Cards'; }
		}
	}
	export class NiuNiuCard {
		/**
		 * 牌id
		 */
		id: number;
		/**
		 * 剩余数量
		 */
		num: number;
		GetType(): string { return 'Cmd.NiuNiuCard'; }
	}
	/**
	 * 牛牛缺牌数量
	 */
	export class NeedNiuNiuCard_S {
		/**
		 * 一共还有几张可组成的牛牛牌
		 */
		allnum: number;
		/**
		 * 剩余牛牛牌数量
		 */
		cards: NiuNiuCard[];
		GetType(): string { return 'Cmd.NeedNiuNiuCard_S'; }
	}
	/**
	 * 加牌请求
	 */
	export class CatchCardCmd_C {
		/**
		 * 是否需要
		 */
		isNeed: boolean;
		GetType(): string { return 'Cmd.CatchCardCmd_C'; }
	}
	/**
	 * 进入桌子
	 */
	export class EnterDeskCmd_CS {
		GetType(): string { return 'Cmd.EnterDeskCmd_CS'; }
	}
	/**
	 * 获取游戏数据
	 */
	export class GameDataUpdateCmd_C {
		GetType(): string { return 'Cmd.GameDataUpdateCmd_C'; }
	}
	/**
	 *  C-&gt;S 比牌请求
	 *  S-&gt;C 比牌通知
	 */
	export class CompareCardCmd_CS {
		win: PlayCardInfo;
		lose: PlayCardInfo;
		GetType(): string { return 'Cmd.CompareCardCmd_CS'; }
	}
	/**
	 * 升盲通知
	 */
	export class RiseBlindCmd_S {
		smallBlind: number;
		leftSec: number;
		GetType(): string { return 'Cmd.RiseBlindCmd_S'; }
	}
	/**
	 * 押注圈结束
	 */
	export class CircleEndCmd_S {
		/**
		 * 分池
		 */
		devidePot: number[];
		/**
		 * 底牌
		 */
		bottomCard: number[];
		/**
		 * 返回的筹码
		 */
		backchips: GameObjectData;
		GetType(): string { return 'Cmd.CircleEndCmd_S'; }
	}
	/**
	 * 保险阶段开始
	 */
	export class InsuranceStartCmd_S {
		playerList: GameObjectData[];
		circleEnd: CircleEndCmd_S;
		GetType(): string { return 'Cmd.InsuranceStartCmd_S'; }
	}
	export class InsuranceData {
		leftSec: number;
		/**
		 * 操作信息
		 */
		buyList: InsuranceData.Record[];
		/**
		 * 已经买过的
		 */
		buyDone: InsuranceData.Record[];
		GetType(): string { return 'Cmd.InsuranceData'; }
	}
	export module InsuranceData {
		export class Record {
			/**
			 * 池
			 */
			potId: number;
			/**
			 * outs 列表
			 */
			outs: number[];
			/**
			 * 赔率
			 */
			odds: number;
			/**
			 * 池的筹码
			 */
			potChips: number;
			/**
			 * 半池
			 */
			halfPot: number;
			/**
			 * 满池
			 */
			fullPot: number;
			/**
			 * 保本
			 */
			breakEven: number;
			/**
			 * 最少买入
			 */
			least: number;
			/**
			 * 买入数量
			 */
			chips: number;
			seatId: number;
			/**
			 * 0:延时时长 1:延时次数 2:消耗钻石树
			 */
			delay: number[];
			GetType(): string { return 'Cmd.InsuranceData.Record'; }
		}
	}
	/**
	 * 保险可购买通知
	 */
	export class InsuranceNewOpCmd_S {
		op: InsuranceData;
		GetType(): string { return 'Cmd.InsuranceNewOpCmd_S'; }
	}
	/**
	 *  C-&gt;S 买入保险请求
	 *  S-&gt;C 买入保险通知
	 */
	export class InsuranceBuyCmd_CS {
		/**
		 * 操作信息 客户端接受的时候第一个元素是总买入信息
		 */
		buyList: InsuranceData.Record[];
		roomId: number;
		GetType(): string { return 'Cmd.InsuranceBuyCmd_CS'; }
	}
	/**
	 * 购买保险结束
	 */
	export class InsuranceBuyEndCmd_S {
		/**
		 * 底牌
		 */
		bottomCard: number[];
		playerList: GameObjectData[];
		GetType(): string { return 'Cmd.InsuranceBuyEndCmd_S'; }
	}
	export class TagData {
		/**
		 * 颜色
		 */
		color: number;
		/**
		 * 备注
		 */
		notes: string;
		/**
		 * 玩家信息
		 */
		user: Cmd.UserBaseInfo[];
		GetType(): string { return 'Cmd.TagData'; }
	}
	/**
	 * 标签更新
	 */
	export class TagUpdateCmd_CS {
		/**
		 * 操作类型
		 */
		op: Cmd.UpdateOperator;
		tag: TagData;
		GetType(): string { return 'Cmd.TagUpdateCmd_CS'; }
	}
	/**
	 * 标签查询
	 */
	export class TagListCmd_CS {
		/**
		 * 标签列表
		 */
		tagList: TagData[];
		GetType(): string { return 'Cmd.TagListCmd_CS'; }
	}
	/**
	 * 标记标签
	 */
	export class TagUserCmd_CS {
		/**
		 * 操作类型
		 */
		op: Cmd.UpdateOperator;
		tag: TagData;
		/**
		 * 替换成为 标签类型
		 */
		color: number;
		GetType(): string { return 'Cmd.TagUserCmd_CS'; }
	}
	/**
	 * 房间数据
	 */
	export class StatisticsRoomData {
		/**
		 * 房间配置
		 */
		config: Cmd.TexasConfig;
		/**
		 * 榜单 0 mvp|冠军 1 大鱼|泡沫 2 土豪|酱油
		 */
		topList: number[];
		/**
		 * 金钱数据
		 */
		userList: Cmd.StatisticsRoundData[];
		/**
		 * 总数据
		 */
		sum: Cmd.StatisticsRoundData;
		/**
		 * RoundRecord 的 id, 辅助查询玩家战绩, 用来做查询条件
		 */
		id: number;
		honorList: RecordLable[];
		GetType(): string { return 'Cmd.StatisticsRoomData'; }
	}
	/**
	 *  C-&gt;S 请求玩家牌局押注数据统计
	 *  S-&gt;C 通知玩家牌局押注数据统计
	 */
	export class StatisticsRoundQueryCmd_CS {
		rows: Cmd.StatisticsRoundData[];
		uid: number;
		regulation: number;
		GetType(): string { return 'Cmd.StatisticsRoundQueryCmd_CS'; }
	}
	/**
	 *  C-&gt;S 请求玩家牌局标签
	 *  S-&gt;C 通知玩家牌局标签
	 */
	export class StatisticsRoomLabelQueryCmd_CS {
		filter: Cmd.FilterInfo;
		rows: Cmd.TexasConfig[];
		GetType(): string { return 'Cmd.StatisticsRoomLabelQueryCmd_CS'; }
	}
	/**
	 *  C-&gt;S 请求房间结算数据
	 *  S-&gt;C 通知房间结算数据
	 */
	export class StatisticsRoomDataCheckCmd_CS {
		globalRoomId: number;
		roomdata: StatisticsRoomData;
		GetType(): string { return 'Cmd.StatisticsRoomDataCheckCmd_CS'; }
	}
	/**
	 * 牌谱详情
	 */
	export class RoundRecord {
		/**
		 * 每圈的记录
		 */
		circleList: RoundRecord.CircleInfo[];
		/**
		 * 玩家列表
		 */
		userList: GameObjectData[];
		config: TexasRoundInfo;
		/**
		 * 第几局
		 */
		roundNo: number;
		id: number;
		/**
		 * 弃牌的玩家
		 */
		foldList: number[];
		GetType(): string { return 'Cmd.RoundRecord'; }
	}
	export module RoundRecord {
		export class CircleInfo {
			circle: number;
			/**
			 * 池中总筹码数
			 */
			sumPot: number;
			/**
			 * 剩余人数
			 */
			num: number;
			/**
			 * 底牌
			 */
			board: number[];
			/**
			 * 押注记录
			 */
			actList: Action[];
			GetType(): string { return 'Cmd.RoundRecord.CircleInfo'; }
		}
	}
	/**
	 * 牌谱标签
	 */
	export class RecordLable {
		profitWinner: number;
		profitMe: number;
		/**
		 * 第几局
		 */
		roundNo: number;
		/**
		 * 1、比牌赢，0、其他玩家弃牌赢
		 */
		winType: number;
		/**
		 * 赢家姓名
		 */
		winnerName: string;
		/**
		 * 赢的牌型
		 */
		cardType: CardSetType;
		/**
		 * 赢家数量
		 */
		winnerNum: number;
		/**
		 * 我的手牌
		 */
		handCardList: number[];
		user: Cmd.UserBaseInfo;
		globalRoomId: number;
		smallBlind: number;
		/**
		 * 牌谱id
		 */
		id: number;
		honor: GameHonor;
		GetType(): string { return 'Cmd.RecordLable'; }
	}
	/**
	 *  C-&gt;S 请求房间牌谱列表
	 *  S-&gt;C 请求房间牌谱回复
	 */
	export class RoundRecordRoomQueryCmd_CS {
		rows: RecordLable[];
		filter: Cmd.FilterInfo;
		GetType(): string { return 'Cmd.RoundRecordRoomQueryCmd_CS'; }
	}
	/**
	 *  C-&gt;S 查看牌谱请求
	 *  S-&gt;C 查看牌谱回复
	 */
	export class RoundRecordCheckCmd_CS {
		globalRoomId: number;
		/**
		 * 第几局
		 */
		roundNo: number;
		record: RoundRecord;
		num: number;
		GetType(): string { return 'Cmd.RoundRecordCheckCmd_CS'; }
	}
	/**
	 * 牌谱id
	 */
	export class RoundRecordIdUpdateCmd_CS {
		globalRoomId: number;
		collect: number[];
		op: Cmd.UpdateOperator;
		GetType(): string { return 'Cmd.RoundRecordIdUpdateCmd_CS'; }
	}
	/**
	 * 收藏/取消牌谱
	 */
	export class RoundRecordCollectCmd_CS {
		id: number;
		yesOrNo: boolean;
		GetType(): string { return 'Cmd.RoundRecordCollectCmd_CS'; }
	}
	/**
	 * 查看我收藏的牌谱
	 */
	export class RoundRecordQueryMyCmd_CS {
		curPage: number;
		perPage: number;
		rows: RecordLable[];
		filter: Cmd.FilterInfo;
		GetType(): string { return 'Cmd.RoundRecordQueryMyCmd_CS'; }
	}
	/**
	 * 德扑创建房间
	 */
	export class RoomCreateCmd_C {
		config: Cmd.TexasConfig;
		GetType(): string { return 'Cmd.RoomCreateCmd_C'; }
	}
	/**
	 *  C-&gt;S 创建房间选项更新请求
	 *  S-&gt;C 创建房间选项更新通知
	 */
	export class RoomCreateConfigUpdateCmd_CS {
		op: Cmd.UpdateOperator;
		configList: Cmd.TexasConfig[];
		GetType(): string { return 'Cmd.RoomCreateConfigUpdateCmd_CS'; }
	}
	/**
	 *  C-&gt;S 购买记分牌请求
	 *  S-&gt;C 购买记分牌结果
	 */
	export class RoomBuyBringCmd_CS {
		chips: number;
		roomId: number;
		seatId: number;
		GetType(): string { return 'Cmd.RoomBuyBringCmd_CS'; }
	}
	/**
	 *  C-&gt;S 购买记分牌信息请求
	 *  S-&gt;C 购买记分牌通知
	 */
	export class RoomBuyBringInfoRequestCmd_CS {
		/**
		 * 最少买入
		 */
		bringMin: number;
		/**
		 * 最大买入
		 */
		bringMax: number;
		/**
		 * 平台费
		 */
		platFeeRate: number;
		roomId: number;
		seatId: number;
		/**
		 * 俱乐部基金支付平台费
		 */
		clubFundPlatFee: boolean;
		/**
		 * 已经带人的筹码
		 */
		chips: number;
		GetType(): string { return 'Cmd.RoomBuyBringInfoRequestCmd_CS'; }
	}
	/**
	 *  C-&gt;S 房间内所有玩家的金钱统计请求
	 *  S-&gt;C 房间内所有玩家的金钱统计更新
	 */
	export class RoomMoneyDataUpdateCmd_CS {
		roomId: number;
		rows: Cmd.StatisticsRoundData[];
		GetType(): string { return 'Cmd.RoomMoneyDataUpdateCmd_CS'; }
	}
	/**
	 *  C-&gt;S 请求是否有新的牌局消息
	 *  S-&gt;C 有新的牌局消息通知
	 */
	export class GameMessageNotifyUpdateCmd_CS {
		yesOrNo: boolean;
		GetType(): string { return 'Cmd.GameMessageNotifyUpdateCmd_CS'; }
	}
	/**
	 * 牌局消息
	 */
	export class GameMessage {
		type: GameMessage.Type;
		config: Cmd.TexasConfig;
		itemList: GameMessage.Item[];
		GetType(): string { return 'Cmd.GameMessage'; }
	}
	export module GameMessage {
		export enum Type {
			/**
			 * 买入
			 */
			BuyBring = 1000,
			/**
			 * 报名
			 */
			SignUp = 1001
		}
	}
	export module GameMessage {
		export class Item {
			user: Cmd.UserBaseInfo;
			num: number;
			GetType(): string { return 'Cmd.GameMessage.Item'; }
		}
	}
	/**
	 *  C-&gt;S 请求牌局消息
	 *  S-&gt;C 新的牌局消息通知
	 */
	export class GameMessageUpdateCmd_CS {
		op: Cmd.UpdateOperator;
		rows: GameMessage[];
		GetType(): string { return 'Cmd.GameMessageUpdateCmd_CS'; }
	}
	/**
	 *  C-&gt;S 牌局消息处理请求
	 *  S-&gt;C 牌局消息处理通知
	 */
	export class GameMessageDealCmd_CS {
		roomId: number;
		uid: number;
		yesOrNo: boolean;
		leftSec: number;
		gameId: number;
		zoneId: number;
		GetType(): string { return 'Cmd.GameMessageDealCmd_CS'; }
	}
	/**
	 * 我的牌局
	 */
	export class MyGamesUpdateCmd_CS {
		op: Cmd.UpdateOperator;
		/**
		 * 我加入的
		 */
		game: Cmd.TexasConfig[];
		/**
		 * 俱乐部的
		 */
		clubRoomList: Cmd.TexasConfig[];
		GetType(): string { return 'Cmd.MyGamesUpdateCmd_CS'; }
	}
	/**
	 * 报名请求
	 */
	export class SignUpdateCmd_C {
		roomId: number;
		GetType(): string { return 'Cmd.SignUpdateCmd_C'; }
	}
	/**
	 *  C-&gt;S 请求报名列表
	 *  S-&gt;C 报名列表更新
	 */
	export class SignListUpdateCmd_CS {
		roomId: number;
		my: number[];
		op: Cmd.UpdateOperator;
		signList: Cmd.UserBaseInfo[];
		GetType(): string { return 'Cmd.SignListUpdateCmd_CS'; }
	}
	/**
	 * 进入报名界面通知
	 */
	export class SignEnterCmd_S {
		game: Cmd.TexasConfig;
		signList: Cmd.UserBaseInfo[];
		/**
		 * 是否等待房主审批
		 */
		wait: boolean;
		GetType(): string { return 'Cmd.SignEnterCmd_S'; }
	}
	/**
	 *  C-&gt;S 玩法更新请求
	 *  S-&gt;C 玩法更新通知
	 */
	export class PlayingUpdateCmd_CS {
		op: Cmd.UpdateOperator;
		playList: Cmd.Playing[];
		roomId: number;
		GetType(): string { return 'Cmd.PlayingUpdateCmd_CS'; }
	}
	/**
	 * 强制盲位更新
	 */
	export class StraddleIdUpdateCmd_S {
		op: Cmd.UpdateOperator;
		seatId: number;
		chipsBet: number;
		GetType(): string { return 'Cmd.StraddleIdUpdateCmd_S'; }
	}
	/**
	 * 玩家简单信息
	 */
	export class UserBriefInfo {
		uid: number;
		name: string;
		headurl: string;
		point: number;
		gender: string;
		diamond: number;
		ip: string;
		nickname: string;
		isRobot: boolean;
		/**
		 * 纬度
		 */
		lat: number;
		/**
		 * 经度
		 */
		lng: number;
		/**
		 * 位置信息
		 */
		address: string;
		/**
		 * 结算赢取
		 */
		profit: number;
		/**
		 * 筹码量/押注额
		 */
		chips: number;
		GetType(): string { return 'Cmd.UserBriefInfo'; }
	}
	/**
	 * 同比
	 */
	export class EachCompareCmd_S {
		eachCompare: GameObjectData[];
		GetType(): string { return 'Cmd.EachCompareCmd_S'; }
	}
	/**
	 * 排行榜
	 */
	export class RankingListCmd_CS {
		/**
		 * 日赢收排行
		 */
		dayWinRank: Cmd.RankInfo[];
		/**
		 * 上一轮赢收排行
		 */
		lastTimeWinRank: Cmd.RankInfo[];
		GetType(): string { return 'Cmd.RankingListCmd_CS'; }
	}
	/**
	 * 获取保单到邮箱
	 */
	export class GetPolicyToMail_C {
		policyOperationType: PolicyOperationType;
		/**
		 * 期数
		 */
		roundGroupId: number;
		/**
		 * 邮件地址
		 */
		emailAddress: string;
		GetType(): string { return 'Cmd.GetPolicyToMail_C'; }
	}
	/**
	 * 结果统计
	 */
	export class StatisticsResult_CS {
		/**
		 * 结果统计
		 */
		statistics: StatisticsResult_CS.StatisticsResult;
		GetType(): string { return 'Cmd.StatisticsResult_CS'; }
	}
	export module StatisticsResult_CS {
		/**
		 * 结果统计结构
		 */
		export class StatisticsResult {
			/**
			 * 门id
			 */
			id: number;
			/**
			 * 开奖出现次数
			 */
			resultSum: number;
			GetType(): string { return 'Cmd.StatisticsResult_CS.StatisticsResult'; }
		}
	}
	/**
	 * 客户端结算完成
	 */
	export class ClientSettleFinishCmd_C {
		/**
		 * 获得奖励货币数量
		 */
		awardPoint: number;
		GetType(): string { return 'Cmd.ClientSettleFinishCmd_C'; }
	}
	/**
	 * /////////////////////////////////////////////////////////////深圳掌娱-百乐坊 Begin/////////////////////////////////////////////
	 */
	export class ZyBaiLeFangGame_C {
		/**
		 * 1需要之前开局结果，0不需要
		 */
		needRoundResult: number;
		GetType(): string { return 'Cmd.ZyBaiLeFangGame_C'; }
	}
	export class ZyBaiLeFangGame_S {
		/**
		 * 错误信息
		 */
		response: string;
		/**
		 * 当前序列ID
		 */
		id: number;
		/**
		 * 现在是序列里面第几局
		 */
		idx: number;
		/**
		 * 闲开牌数组(数组长度一般为2,需要博牌则为3) b 庄开牌数组(数组长度一般为2,需要博牌则为3) b 已经开局的结果(每个元素由三位组成.)
		 */
		result: string;
		/**
		 *  第1位:0闲赢 ，1庄赢 ，2和
		 *  第2位:赢的点数(闲赢就是闲的点数，庄赢就是庄的点数，和就是和的点数)
		 *  第3位:0无闲对无庄对，1闲对，2庄对，3闲对庄对；
		 *  当前游戏状态 0:游戏暂停，1:游戏下注，2:停止下注，3:直接开牌(不需要咪牌的情况)，4:前四张牌咪牌，5:闲博牌咪牌，6:庄博牌咪牌，7:玩家结算状态
		 */
		gameStatus: number;
		/**
		 * 当前游戏状态剩余运行时间
		 */
		statusTime: number;
		/**
		 * 闲押注
		 */
		wager1: number;
		/**
		 * 闲对押注
		 */
		wager2: number;
		/**
		 * 和押注
		 */
		wager3: number;
		/**
		 * 庄对押注
		 */
		wager4: number;
		/**
		 * 庄押注
		 */
		wager5: number;
		/**
		 * 之前的牌局结果
		 */
		roundResult: string;
		/**
		 * 玩家人数
		 */
		players: number;
		/**
		 * 在线人数
		 */
		online: number;
		GetType(): string { return 'Cmd.ZyBaiLeFangGame_S'; }
	}
	/**
	 * ///////////////////////////牌九流水//////////////////////////////////
	 */
	export class UserPoint {
		id: number;
		point: number;
		GetType(): string { return 'Cmd.UserPoint'; }
	}
	export class PotPointSet {
		up: UserPoint[];
		GetType(): string { return 'Cmd.PotPointSet'; }
	}
	export class PaiGowGameWater_S {
		pps: PotPointSet[];
		GetType(): string { return 'Cmd.PaiGowGameWater_S'; }
	}
	export class UpdatePJPointSeatRoom_S {
		uid: number;
		point: number;
		GetType(): string { return 'Cmd.UpdatePJPointSeatRoom_S'; }
	}
	/**
	 * 请求提示出牌
	 */
	export class OperatGameReq_C {
		/**
		 * 提示类型
		 */
		op: Operation;
		GetType(): string { return 'Cmd.OperatGameReq_C'; }
	}
	/**
	 * 返回提示出牌列表
	 */
	export class OperatGameReq_S {
		/**
		 * 提示类型
		 */
		op: Operation;
		/**
		 * 手牌
		 */
		cardSet: number[];
		GetType(): string { return 'Cmd.OperatGameReq_S'; }
	}
	/**
	 *  C-&gt;S 压注请求
	 *  S-&gt;C 压注通知
	 */
	export class a {
		/**
		 * 子弹信息
		 */
		bulletinfo: BulletInfo[];
		GetType(): string { return 'Cmd.a'; }
	}
	/**
	 * 打中鱼列表
	 */
	export class b {
		/**
		 * 打中列表
		 */
		list: HitFishEx[];
		GetType(): string { return 'Cmd.b'; }
	}
	/**
	 * 打中鱼列表
	 */
	export class HitFishEx {
		/**
		 * 用户ID
		 */
		uid: number;
		/**
		 * 子弹id
		 */
		bid: number;
		/**
		 * 打中列表
		 */
		list: Fish[];
		/**
		 * 打中类型
		 */
		typ: number;
		/**
		 * 增加鱼的赔率
		 */
		ods: number;
		/**
		 * 子弹倍率
		 */
		bIdx: number;
		/**
		 * 打中单条鱼
		 */
		fish: Fish;
		GetType(): string { return 'Cmd.HitFishEx'; }
	}
	/**
	 * 子弹信息
	 */
	export class BulletInfo {
		/**
		 * 子弹ID
		 */
		id: number;
		/**
		 * 玩家id
		 */
		uid: number;
		/**
		 * 子弹消耗钱数
		 */
		cost: number;
		/**
		 * 子弹角度
		 */
		angle: number;
		/**
		 * 发射时间
		 */
		fireTime: number;
		/**
		 * 鱼的流水id
		 */
		fishId: number;
		/**
		 * 玩家金币
		 */
		point: number;
		/**
		 * 子弹消耗钱数索引
		 */
		costId: number;
		GetType(): string { return 'Cmd.BulletInfo'; }
	}
	export class Fish {
		/**
		 * 鱼的流水id
		 */
		id: number;
		/**
		 * 模板id
		 */
		templateId: number;
		offsetX: number;
		offsetY: number;
		/**
		 * 鱼的技能
		 */
		skill: FishSkillType;
		/**
		 * 获得奖励
		 */
		score: number;
		/**
		 * 归属者
		 */
		owner: number;
		/**
		 * 掉落的道具
		 */
		items: ItemInfo[];
		GetType(): string { return 'Cmd.Fish'; }
	}
	/**
	 * 单条鱼出鱼信息
	 */
	export class FishInfo {
		/**
		 * fish
		 */
		fishs: Fish[];
		/**
		 * 路径id
		 */
		pathId: string;
		/**
		 * 出鱼时间
		 */
		spawnTime: number;
		GetType(): string { return 'Cmd.FishInfo'; }
	}
	/**
	 * 出鱼信息
	 */
	export class SpawnFishCmd_S {
		fishlist: FishInfo[];
		GetType(): string { return 'Cmd.SpawnFishCmd_S'; }
	}
	/**
	 * 打中单条鱼
	 */
	export class HFCmd_C {
		/**
		 * 子弹id
		 */
		bid: number;
		/**
		 * 鱼id
		 */
		fid: number;
		GetType(): string { return 'Cmd.HFCmd_C'; }
	}
	/**
	 * 打中鱼列表
	 */
	export class HitFish {
		/**
		 * 用户ID
		 */
		uid: number;
		/**
		 * 子弹id
		 */
		bid: number;
		/**
		 * 打中列表
		 */
		list: Fish[];
		/**
		 * 打中类型
		 */
		hitType: number;
		/**
		 * 增加鱼的赔率
		 */
		addOdds: number;
		/**
		 * 子弹倍率
		 */
		bulletIndex: number;
		GetType(): string { return 'Cmd.HitFish'; }
	}
	/**
	 * 打中鱼列表
	 */
	export class HitFishCmd_CS {
		/**
		 * 打中列表
		 */
		list: HitFish[];
		/**
		 * 玩家当前金币
		 */
		point: number;
		GetType(): string { return 'Cmd.HitFishCmd_CS'; }
	}
	/**
	 * 打死列表
	 */
	export class DeadFish {
		/**
		 * 用户ID
		 */
		uid: number;
		/**
		 * 子弹id
		 */
		bid: number;
		/**
		 * 打死列表
		 */
		list: Fish[];
		/**
		 * 子弹倍率
		 */
		bulletIndex: number;
		/**
		 * 死亡类型
		 */
		deadType: number;
		GetType(): string { return 'Cmd.DeadFish'; }
	}
	/**
	 * 打死列表
	 */
	export class DeadFishCmd_S {
		/**
		 * 打死列表
		 */
		list: DeadFish[];
		/**
		 * 玩家当前金币
		 */
		point: number;
		/**
		 * jackpot奖池信息,房卡捕鱼用
		 */
		jackpot: number;
		GetType(): string { return 'Cmd.DeadFishCmd_S'; }
	}
	/**
	 * 改变场景
	 */
	export class ChangeSceneCmd_S {
		/**
		 * 场景id
		 */
		sceneId: number;
		GetType(): string { return 'Cmd.ChangeSceneCmd_S'; }
	}
	/**
	 *  C-&gt;S 操作请求
	 *  S-&gt;C 操作通知
	 */
	export class ActionCmd_CS {
		act: Action;
		GetType(): string { return 'Cmd.ActionCmd_CS'; }
	}
	/**
	 * S-&gt;C 操作超时
	 */
	export class BetTimeoutRoomCmd_S {
		/**
		 * 金币不足：1，超时：2
		 */
		optype: number;
		GetType(): string { return 'Cmd.BetTimeoutRoomCmd_S'; }
	}
	/**
	 * 平台金钱带入带出
	 */
	export class PlatMoneyBringInOrOutCmd_CS {
		money: number;
		/**
		 * true: 带入 false: 带出
		 */
		inOrOut: boolean;
		result: number;
		GetType(): string { return 'Cmd.PlatMoneyBringInOrOutCmd_CS'; }
	}
	/**
	 * 平台金钱查询
	 */
	export class PlatMoneyQueryCmd_CS {
		money: number;
		GetType(): string { return 'Cmd.PlatMoneyQueryCmd_CS'; }
	}
	/**
	 * 询问修改名称费用
	 */
	export class ChangeNicknameMoneyQueryCmd_CS {
		money: number;
		GetType(): string { return 'Cmd.ChangeNicknameMoneyQueryCmd_CS'; }
	}
	/**
	 * 填写推荐人
	 */
	export class WriteInviterActivityCmd_CS {
		uid: number;
		user: Cmd.UserBaseInfo;
		resultCode: number;
		GetType(): string { return 'Cmd.WriteInviterActivityCmd_CS'; }
	}
	/**
	 * 查询已填写推荐人
	 */
	export class QueryWriteInviterActivityCmd_CS {
		uid: number;
		user: Cmd.UserBaseInfo;
		GetType(): string { return 'Cmd.QueryWriteInviterActivityCmd_CS'; }
	}
	/**
	 * 查询推荐人
	 */
	export class QueryInviterActivityCmd_CS {
		rows: Cmd.UserBaseInfo[];
		/**
		 * 领取次数
		 */
		finish: number;
		GetType(): string { return 'Cmd.QueryInviterActivityCmd_CS'; }
	}
	/**
	 * 玩家分配阵营
	 */
	export class PlayerChangeTeam_CS {
		/**
		 * 玩家翻牌阵营
		 */
		teamData: TeamData;
		/**
		 * 倒计时秒数opEndTime
		 */
		leftSec: number;
		/**
		 * 阵营属性
		 */
		teamProps: number[];
		GetType(): string { return 'Cmd.PlayerChangeTeam_CS'; }
	}
	/**
	 * 发送扩展数据
	 */
	export class SendExtendInfo_S {
		/**
		 * 保险彩金
		 */
		insurancePool: number;
		/**
		 * 本轮赢取金币
		 */
		winTotalCoin: number;
		/**
		 * 关卡数量
		 */
		cardNumber: number;
		/**
		 * 瞄准器类型
		 */
		aimType: number;
		/**
		 * 关卡数量
		 */
		cardNumberList: number[];
		GetType(): string { return 'Cmd.SendExtendInfo_S'; }
	}
	/**
	 * 玩家状态信息
	 */
	export class UserStatusInfo {
		/**
		 * 座位id
		 */
		seatId: number;
		/**
		 * 可操作权限
		 */
		opList: Operation[];
		GetType(): string { return 'Cmd.UserStatusInfo'; }
	}
	/**
	 * 选择出牌
	 */
	export class PickOutCardCmd_CS {
		uid: number;
		/**
		 * 选择牌集
		 */
		cardSetList: CardSetList[];
		/**
		 * 选择项
		 */
		pos: number;
		GetType(): string { return 'Cmd.PickOutCardCmd_CS'; }
	}
	/**
	 * 有玩家申请加入时给匹配主一个弹窗(扑克需求不同)
	 */
	export class ReturnJoinMemberMatchGroupCmd_S {
		matchId: number;
		uid: number;
		nickname: string;
		/**
		 * 服务器间用
		 */
		ownerid: number;
		/**
		 * 微信联系方式
		 */
		wechat: string;
		/**
		 * 备注
		 */
		note: string;
		GetType(): string { return 'Cmd.ReturnJoinMemberMatchGroupCmd_S'; }
	}
	/**
	 * 玩家理牌
	 */
	export class SortCardCmd_CS {
		/**
		 * 理出的牌
		 */
		cardSet: number[];
		/**
		 * 牌型
		 */
		cardType: CardSetType;
		GetType(): string { return 'Cmd.SortCardCmd_CS'; }
	}
	/**
	 * 撤销理牌
	 */
	export class DestroySortCardCmd_CS {
		/**
		 * 撤销牌
		 */
		cardSet: number[];
		GetType(): string { return 'Cmd.DestroySortCardCmd_CS'; }
	}
	/**
	 * 换座表现
	 */
	export class SwitchSeatCmd_S {
		/**
		 * 交换的座位数据
		 */
		seatData: SeatData[];
		GetType(): string { return 'Cmd.SwitchSeatCmd_S'; }
	}
}
